name: Federated Learning Tests

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  push:
    branches: [ main ]
    paths:
      - 'federated_learning/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'federated_learning/**'
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r federated_learning/edge_client/requirements.txt
          pip install pytest pytest-cov
      
      - name: Run unit tests
        run: |
          cd federated_learning
          pytest -xvs --cov=. --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./federated_learning/coverage.xml
          fail_ci_if_error: false
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Generate certificates
        run: |
          mkdir -p federated_learning/certs
          cd federated_learning
          chmod +x generate_certs.sh
          ./generate_certs.sh
      
      - name: Create MQTT password file
        run: |
          mkdir -p federated_learning/mqtt/config
          echo "fluser:$(openssl passwd -apr1 testpassword)" > federated_learning/mqtt/config/password.txt
      
      - name: Build and run services
        run: |
          cd federated_learning
          docker-compose build
          docker-compose up -d fl_server mqtt_broker
      
      - name: Wait for services to start
        run: sleep 30
      
      - name: Run integration tests
        run: |
          cd federated_learning
          docker-compose up --build integration-test
      
      - name: Check integration test logs
        run: |
          docker logs integration-test
      
      - name: Check server logs
        run: |
          docker logs fl_server
      
      - name: Clean up
        run: |
          cd federated_learning
          docker-compose down
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      
      - name: Run Bandit security scan
        run: |
          bandit -r federated_learning -f json -o bandit-results.json
      
      - name: Run Safety check
        run: |
          safety check -r federated_learning/edge_client/requirements.txt -r federated_learning/server/requirements.txt -r federated_learning/integration_test/requirements.txt --json > safety-results.json
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json
  
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Edge Client
        uses: docker/build-push-action@v4
        with:
          context: ./federated_learning/edge_client
          push: true
          tags: ghcr.io/${{ github.repository }}/edge-flower-client:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push FL Server
        uses: docker/build-push-action@v4
        with:
          context: ./federated_learning/server
          push: true
          tags: ghcr.io/${{ github.repository }}/fl-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
