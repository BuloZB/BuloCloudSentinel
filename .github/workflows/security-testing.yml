name: Security Testing
true:
  schedule:
  - cron: 0 0 * * 0
  workflow_dispatch: null
  push:
    branches:
    - main
    paths:
    - '**.py'
    - '**.js'
    - '**.ts'
    - '**.jsx'
    - '**.tsx'
    - requirements.txt
    - package.json
jobs:
  dependency-scanning:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: 'python -m pip install --upgrade pip

        pip install safety

        '
    - name: Run safety check
      run: 'safety check -r requirements.txt --json > safety-report.json || true

        safety check -r backend/requirements.txt --json > backend-safety-report.json
        || true

        safety check -r anti_jamming_service/requirements.txt --json > anti-jamming-safety-report.json
        || true

        safety check -r vision_system/requirements.txt --json > vision-safety-report.json
        || true

        '
    - name: Upload safety reports
      uses: actions/upload-artifact@v3
      with:
        name: safety-reports
        path: 'safety-report.json

          backend-safety-report.json

          anti-jamming-safety-report.json

          vision-safety-report.json

          '
  code-scanning:
    name: Code Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: 'python -m pip install --upgrade pip

        pip install bandit semgrep

        '
    - name: Run bandit scan
      run: 'bandit -r . -f json -o bandit-report.json -x "tests,venv,env,.venv,.env,node_modules"
        || true

        '
    - name: Run semgrep scan
      run: 'semgrep --config=p/security-audit --json -o semgrep-report.json . || true

        '
    - name: Upload code scanning reports
      uses: actions/upload-artifact@v3
      with:
        name: code-scanning-reports
        path: 'bandit-report.json

          semgrep-report.json

          '
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Run Trufflehog
      uses: trufflesecurity/trufflehog-actions-scan@master
      with:
        path: .
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --json --only-verified
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs:
    - dependency-scanning
    - code-scanning
    - secret-scanning
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Download safety reports
      uses: actions/download-artifact@v3
      with:
        name: safety-reports
        path: reports/safety
    - name: Download code scanning reports
      uses: actions/download-artifact@v3
      with:
        name: code-scanning-reports
        path: reports/code-scanning
    - name: Generate security report
      run: "mkdir -p reports\n\necho \"# Security Scan Report\" > security-report.md\n\
        echo \"\" >> security-report.md\necho \"**Date:** $(date +'%Y-%m-%d %H:%M:%S')\"\
        \ >> security-report.md\necho \"\" >> security-report.md\n\necho \"## Dependency\
        \ Scanning\" >> security-report.md\necho \"\" >> security-report.md\n\n# Process\
        \ safety reports\nTOTAL_VULNERABILITIES=0\nfor report in reports/safety/*.json;\
        \ do\n  if [ -f \"$report\" ]; then\n    VULNS=$(jq 'length' \"$report\")\n\
        \    TOTAL_VULNERABILITIES=$((TOTAL_VULNERABILITIES + VULNS))\n    \n    echo\
        \ \"### $(basename \"$report\" .json)\" >> security-report.md\n    echo \"\
        \" >> security-report.md\n    echo \"Found $VULNS vulnerabilities.\" >> security-report.md\n\
        \    echo \"\" >> security-report.md\n    \n    if [ \"$VULNS\" -gt 0 ]; then\n\
        \      echo \"| Package | Vulnerability | Severity | Description |\" >> security-report.md\n\
        \      echo \"|---------|---------------|----------|-------------|\" >> security-report.md\n\
        \      \n      jq -r '.[] | \"| \\(.package_name) | \\(.vulnerability_id)\
        \ | \\(.severity) | \\(.advisory) |\"' \"$report\" >> security-report.md\n\
        \      echo \"\" >> security-report.md\n    fi\n  fi\ndone\n\necho \"## Code\
        \ Scanning\" >> security-report.md\necho \"\" >> security-report.md\n\n# Process\
        \ bandit report\nif [ -f \"reports/code-scanning/bandit-report.json\" ]; then\n\
        \  ISSUES=$(jq '.results | length' \"reports/code-scanning/bandit-report.json\"\
        )\n  \n  echo \"### Bandit Scan\" >> security-report.md\n  echo \"\" >> security-report.md\n\
        \  echo \"Found $ISSUES issues.\" >> security-report.md\n  echo \"\" >> security-report.md\n\
        \  \n  if [ \"$ISSUES\" -gt 0 ]; then\n    echo \"| Severity | Issue | File\
        \ | Line |\" >> security-report.md\n    echo \"|----------|-------|------|------|\"\
        \ >> security-report.md\n    \n    jq -r '.results[] | \"| \\(.issue_severity)\
        \ | \\(.issue_text) | \\(.filename) | \\(.line_number) |\"' \"reports/code-scanning/bandit-report.json\"\
        \ >> security-report.md\n    echo \"\" >> security-report.md\n  fi\nfi\n\n\
        # Process semgrep report\nif [ -f \"reports/code-scanning/semgrep-report.json\"\
        \ ]; then\n  ISSUES=$(jq '.results | length' \"reports/code-scanning/semgrep-report.json\"\
        )\n  \n  echo \"### Semgrep Scan\" >> security-report.md\n  echo \"\" >> security-report.md\n\
        \  echo \"Found $ISSUES issues.\" >> security-report.md\n  echo \"\" >> security-report.md\n\
        \  \n  if [ \"$ISSUES\" -gt 0 ]; then\n    echo \"| Severity | Issue | File\
        \ | Line |\" >> security-report.md\n    echo \"|----------|-------|------|------|\"\
        \ >> security-report.md\n    \n    jq -r '.results[] | \"| \\(.extra.severity)\
        \ | \\(.extra.message) | \\(.path) | \\(.start.line) |\"' \"reports/code-scanning/semgrep-report.json\"\
        \ >> security-report.md\n    echo \"\" >> security-report.md\n  fi\nfi\n\n\
        echo \"## Recommendations\" >> security-report.md\necho \"\" >> security-report.md\n\
        echo \"1. **Fix identified vulnerabilities** - Address all vulnerabilities\
        \ found in the dependency check.\" >> security-report.md\necho \"2. **Fix\
        \ identified code issues** - Address all issues found in the code scanning.\"\
        \ >> security-report.md\necho \"3. **Implement regular security testing**\
        \ - Run security tests regularly to identify and fix issues.\" >> security-report.md\n\
        echo \"4. **Keep dependencies up to date** - Regularly update dependencies\
        \ to address security vulnerabilities.\" >> security-report.md\n"
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md
    - name: Create issue if vulnerabilities found
      if: github.event_name == 'schedule'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: "const fs = require('fs');\n\ntry {\n  const securityReport = fs.readFileSync('security-report.md',\
          \ 'utf8');\n  \n  // Create issue\n  await github.rest.issues.create({\n\
          \    owner: context.repo.owner,\n    repo: context.repo.repo,\n    title:\
          \ `Security Scan: Vulnerabilities found`,\n    body: securityReport\n  });\n\
          } catch (error) {\n  console.error('Error creating issue:', error);\n}\n"
