name: Security Scan

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

# Define minimal permissions required for this workflow
permissions:
  contents: read  # Only need read access to repository contents
  actions: read   # For reading workflow runs
  security-events: write  # For uploading security scan results

jobs:
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          if [ -f requirements-secure.txt ]; then
            pip install -r requirements-secure.txt
          else
            pip install -r requirements.txt
          fi

      - name: Run safety check
        run: |
          safety check --full-report --output text > safety-report.txt || true
          echo "Safety check completed. See safety-report.txt for details."

      - name: Upload safety report
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install npm dependencies
        run: |
          cd frontend
          npm ci

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --json > npm-audit-results.json || true

      - name: Upload npm audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: frontend/npm-audit-results.json

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'BuloCloudSentinel'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload Dependency-Check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports

  code-scanning:
    name: Code Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          if [ -f requirements-secure.txt ]; then
            pip install -r requirements-secure.txt
          else
            pip install -r requirements.txt
          fi

      - name: Run Bandit scan
        run: |
          bandit -r . -x "*/tests/*,*/node_modules/*" -f json -o bandit-results.json || true
          echo "Bandit scan completed. See bandit-results.json for details."

      - name: Upload bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit-results.json

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true

  container-scanning:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: bulo-cloud-sentinel:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bulo-cloud-sentinel:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'json'
          output: 'trivy-fs-results.json'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy filesystem results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-results
          path: trivy-fs-results.json

  sast-scanning:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semgrep

      - name: Run Semgrep scan
        run: |
          semgrep --config=p/owasp-top-ten --config=p/security-audit --json -o semgrep-results.json || true
          echo "Semgrep scan completed. See semgrep-results.json for details."

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json

  custom-security-scan:
    name: Custom Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-secure.txt ]; then
            pip install -r requirements-secure.txt
          else
            pip install -r requirements.txt
          fi

      - name: Run custom security tests
        run: |
          if [ -f security/testing/run_security_tests.py ]; then
            python security/testing/run_security_tests.py --output custom-security-results.json
          else
            echo "No custom security tests found"
            echo '{"results": [], "status": "no_tests_found"}' > custom-security-results.json
          fi

      - name: Upload custom security results
        uses: actions/upload-artifact@v4
        with:
          name: custom-security-results
          path: custom-security-results.json

  security-report:
    name: Generate Security Report
    needs: [dependency-check, code-scanning, secret-scanning, container-scanning, sast-scanning, custom-security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "## Scan Date: $(date)" >> security-report.md
          echo "" >> security-report.md

          echo "## Dependency Check" >> security-report.md
          echo "```" >> security-report.md
          cat artifacts/safety-report/safety-report.txt >> security-report.md || echo "No safety report found" >> security-report.md
          echo "```" >> security-report.md
          echo "" >> security-report.md

          echo "## Code Scanning" >> security-report.md
          echo "CodeQL analysis results are available in the Security tab." >> security-report.md
          echo "" >> security-report.md

          echo "## Container Scanning" >> security-report.md
          echo "Trivy scan results are available in the Security tab." >> security-report.md
          echo "" >> security-report.md

          echo "## Static Application Security Testing" >> security-report.md
          echo "Semgrep scan results are available in the artifacts." >> security-report.md
          echo "" >> security-report.md

          echo "## Secret Scanning" >> security-report.md
          echo "Gitleaks scan results are available in the workflow logs." >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

  notify:
    name: Notify Security Team
    needs: security-report
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Send notification
        if: ${{ secrets.SLACK_WEBHOOK != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: security-alerts
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Security scan completed. Please check the results.'
          SLACK_TITLE: Security Scan Results
          SLACK_USERNAME: GitHub Actions
        continue-on-error: true
