name: Security Scan
on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering
permissions:
  contents: read
  actions: read
  security-events: write
jobs:
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety==3.5.0 bandit==1.7.7 pip-audit==2.7.0 semgrep==1.71.0
        pip install detect-secrets==1.4.0 trufflehog==3.63.2 cyclonedx-bom==3.11.0
        if [ -f requirements-secure.txt ]; then
          pip install -r requirements-secure.txt
        else
          pip install -r requirements.txt
        fi
    - name: Run safety check
      run: 'safety check --full-report --output text > safety-report.txt || true

        echo "Safety check completed. See safety-report.txt for details."

        '
    - name: Run pip-audit check
      run: 'pip-audit -r requirements.txt -f json -o pip-audit-results.json || true

        echo "Pip-audit check completed. See pip-audit-results.json for details."

        '
    - name: Upload safety report
      uses: actions/upload-artifact@v4
      with:
        name: safety-report
        path: safety-report.txt
    - name: Upload pip-audit report
      uses: actions/upload-artifact@v4
      with:
        name: pip-audit-report
        path: pip-audit-results.json
    - name: Upload pip-audit report
      uses: actions/upload-artifact@v4
      with:
        name: pip-audit-report
        path: pip-audit-results.json
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    - name: Install npm dependencies
      run: 'cd frontend

        npm ci

        '
    - name: Run npm audit
      run: 'cd frontend

        npm audit --json > npm-audit-results.json || true

        '
    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-results
        path: frontend/npm-audit-results.json
    - name: Run OWASP Dependency-Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: BuloCloudSentinel
        path: .
        format: HTML
        out: reports
        args: '--enableRetired --enableExperimental

          '
    - name: Upload Dependency-Check results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports
  code-scanning:
    name: Code Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: "python -m pip install --upgrade pip\npip install bandit\nif [ -f requirements-secure.txt\
        \ ]; then\n  pip install -r requirements-secure.txt\nelse\n  pip install -r\
        \ requirements.txt\nfi\n"
    - name: Run Bandit scan
      run: 'bandit -r . -x "*/tests/*,*/node_modules/*" -f json -o bandit-results.json
        || true

        echo "Bandit scan completed. See bandit-results.json for details."

        '
    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-results
        path: bandit-results.json
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install detect-secrets==1.4.0 trufflehog==3.63.2

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true

    - name: Run detect-secrets
      run: |
        detect-secrets scan --all-files > detect-secrets-results.json
        echo "Detect-secrets scan completed. See detect-secrets-results.json for details."

    - name: Run TruffleHog
      run: |
        trufflehog filesystem --directory=. --json > trufflehog-results.json || true
        echo "TruffleHog scan completed. See trufflehog-results.json for details."

    - name: Upload detect-secrets results
      uses: actions/upload-artifact@v4
      with:
        name: detect-secrets-results
        path: detect-secrets-results.json

    - name: Upload TruffleHog results
      uses: actions/upload-artifact@v4
      with:
        name: trufflehog-results
        path: trufflehog-results.json
  container-scanning:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        load: true
        tags: bulo-cloud-sentinel:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: bulo-cloud-sentinel:latest
        format: sarif
        output: trivy-results.sarif
        severity: CRITICAL,HIGH
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: fs
        format: json
        output: trivy-fs-results.json
        severity: CRITICAL,HIGH
    - name: Upload Trivy filesystem results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-fs-results
        path: trivy-fs-results.json
  sast-scanning:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install semgrep==1.71.0 bandit==1.7.7 flake8==7.0.0 mypy==1.9.0 ruff==0.4.7
        if [ -f requirements-secure.txt ]; then
          pip install -r requirements-secure.txt
        else
          pip install -r requirements.txt
        fi

    - name: Run Semgrep scan
      run: |
        semgrep --config=p/owasp-top-ten --config=p/security-audit --json -o semgrep-results.json || true
        echo "Semgrep scan completed. See semgrep-results.json for details."

    - name: Run Bandit scan (comprehensive)
      run: |
        bandit -r . -x "*/tests/*,*/node_modules/*,*/venv/*,.venv/*" -f json -o bandit-comprehensive-results.json || true
        echo "Bandit comprehensive scan completed. See bandit-comprehensive-results.json for details."

    - name: Run Ruff security linting
      run: |
        ruff check --select=S --output-format=json . > ruff-security-results.json || true
        echo "Ruff security linting completed. See ruff-security-results.json for details."

    - name: Run MyPy type checking
      run: |
        mypy --ignore-missing-imports --disallow-untyped-defs --disallow-incomplete-defs --json-report mypy-results.json . || true
        echo "MyPy type checking completed. See mypy-results.json for details."

    - name: Upload Semgrep results
      uses: actions/upload-artifact@v4
      with:
        name: semgrep-results
        path: semgrep-results.json

    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-comprehensive-results
        path: bandit-comprehensive-results.json

    - name: Upload Ruff results
      uses: actions/upload-artifact@v4
      with:
        name: ruff-security-results
        path: ruff-security-results.json

    - name: Upload MyPy results
      uses: actions/upload-artifact@v4
      with:
        name: mypy-results
        path: mypy-results.json
  custom-security-scan:
    name: Custom Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: "python -m pip install --upgrade pip\nif [ -f requirements-secure.txt ];\
        \ then\n  pip install -r requirements-secure.txt\nelse\n  pip install -r requirements.txt\n\
        fi\n"
    - name: Run custom security tests
      run: "if [ -f security/testing/run_security_tests.py ]; then\n  python security/testing/run_security_tests.py\
        \ --output custom-security-results.json\nelse\n  echo \"No custom security\
        \ tests found\"\n  echo '{\"results\": [], \"status\": \"no_tests_found\"\
        }' > custom-security-results.json\nfi\n"
    - name: Upload custom security results
      uses: actions/upload-artifact@v4
      with:
        name: custom-security-results
        path: custom-security-results.json
  security-report:
    name: Generate Security Report
    needs:
    - dependency-check
    - code-scanning
    - secret-scanning
    - container-scanning
    - sast-scanning
    - custom-security-scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Generate security report
      run: 'echo "# Security Scan Report" > security-report.md

        echo "## Scan Date: $(date)" >> security-report.md

        echo "" >> security-report.md


        echo "## Dependency Check" >> security-report.md

        echo "### Safety Check" >> security-report.md

        echo "```" >> security-report.md

        cat artifacts/safety-report/safety-report.txt >> security-report.md || echo
        "No safety report found" >> security-report.md

        echo "```" >> security-report.md

        echo "" >> security-report.md


        echo "### Pip-Audit Check" >> security-report.md

        echo "Pip-audit results are available in the artifacts." >> security-report.md

        echo "" >> security-report.md


        echo "## Code Scanning" >> security-report.md

        echo "CodeQL analysis results are available in the Security tab." >> security-report.md

        echo "" >> security-report.md


        echo "## Container Scanning" >> security-report.md

        echo "Trivy scan results are available in the Security tab." >> security-report.md

        echo "" >> security-report.md


        echo "## Static Application Security Testing" >> security-report.md

        echo "Semgrep scan results are available in the artifacts." >> security-report.md

        echo "" >> security-report.md


        echo "## Secret Scanning" >> security-report.md

        echo "Gitleaks scan results are available in the workflow logs." >> security-report.md

        '
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
  notify:
    name: Notify Security Team
    needs: security-report
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
    - name: Send notification
      if: ${{ secrets.SLACK_WEBHOOK != '' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: security-alerts
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: Security scan completed. Please check the results.
        SLACK_TITLE: Security Scan Results
        SLACK_USERNAME: GitHub Actions
      continue-on-error: true
