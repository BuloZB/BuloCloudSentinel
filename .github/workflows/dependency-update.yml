name: Dependency Update
on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  issues: read
  pull-requests: read
  actions: read
  security-events: read

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch all history for proper version tracking

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools safety pip-audit semgrep
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi

    - name: Find all requirements files
      id: find-requirements
      run: |
        echo "REQUIREMENTS_FILES=$(find . -name "requirements*.txt" -not -path "*/\.*" -not -path "*/venv/*" | tr '\n' ' ')" >> $GITHUB_ENV
        echo "Found requirements files: $(find . -name "requirements*.txt" -not -path "*/\.*" -not -path "*/venv/*" | tr '\n' ' ')"

    - name: Check for outdated dependencies
      id: outdated
      run: |
        pip list --outdated --format=json > outdated.json
        echo "OUTDATED_COUNT=$(jq length outdated.json)" >> $GITHUB_ENV
        if [ -s outdated.json ]; then
          cat outdated.json | jq -r '.[] | "* \(.name): \(.version) -> \(.latest_version)"' > outdated.md
          echo "Found $(jq length outdated.json) outdated packages"
        else
          echo "No outdated packages found"
          echo "No outdated packages found" > outdated.md
        fi

    - name: Run safety check on all requirements files
      run: |
        mkdir -p reports
        for req_file in $REQUIREMENTS_FILES; do
          echo "Checking $req_file for security vulnerabilities..."
          safety check -r "$req_file" --output text > "reports/safety-report-$(basename $req_file).txt" || true
        done

        # Combine all reports
        cat reports/safety-report-*.txt > safety-report.txt
        echo "Safety check completed. See safety-report.txt for details."

    - name: Run pip-audit check on all requirements files
      run: |
        mkdir -p reports
        for req_file in $REQUIREMENTS_FILES; do
          echo "Auditing $req_file for vulnerabilities..."
          pip-audit -r "$req_file" -f json -o "reports/pip-audit-$(basename $req_file).json" || true
        done

        # Combine all reports (simplified version)
        jq -s 'add' reports/pip-audit-*.json > pip-audit-results.json || echo "[]" > pip-audit-results.json
        echo "Pip-audit check completed. See pip-audit-results.json for details."

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Run Python dependency update script
      run: |
        python update_dependencies.py
        echo "Python dependency update script completed."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run JavaScript dependency update script
      run: |
        node fix_js_dependencies.js
        echo "JavaScript dependency update script completed."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check for changes
      id: git-check
      run: |
        git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT

    - name: Commit changes
      if: steps.git-check.outputs.changes == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "security: update dependencies to fix vulnerabilities

        Updated dependencies to their latest secure versions.
        - Fixed vulnerable packages identified by CodeQL, safety, and pip-audit
        - Updated both Python and JavaScript dependencies
        - Applied exact version pinning for better reproducibility
        - Ensured compatibility across all requirements files

        Security scan results are available in the workflow artifacts."

    - name: Push changes
      if: steps.git-check.outputs.changes == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

    - name: Upload outdated dependencies report
      uses: actions/upload-artifact@v4
      with:
        name: outdated-dependencies
        path: outdated.md

    - name: Upload safety reports
      uses: actions/upload-artifact@v4
      with:
        name: safety-reports
        path: reports/safety-report-*.txt

    - name: Upload pip-audit reports
      uses: actions/upload-artifact@v4
      with:
        name: pip-audit-reports
        path: reports/pip-audit-*.json

    - name: Upload combined reports
      uses: actions/upload-artifact@v4
      with:
        name: combined-security-reports
        path: |
          safety-report.txt
          pip-audit-results.json
