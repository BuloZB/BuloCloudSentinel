name: Edge Kit Build

on:
  push:
    branches: [ main ]
    paths:
      - 'edge_kit/**'
      - '.github/workflows/edge-kit-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'edge_kit/**'
      - '.github/workflows/edge-kit-build.yml'
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight


permissions:
  contents: read
  issues: read
  pull-requests: read
  actions: read
  security-events: read

jobs:
  build-edge-inference:
    name: Build Edge Inference Container
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/arm64]
        device: [jetson, rpi]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./edge_kit/inference
          file: ./edge_kit/inference/Dockerfile
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            DEVICE_TYPE=${{ matrix.device }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/edge-inference-${{ matrix.device }}:latest
            ghcr.io/${{ github.repository_owner }}/edge-inference-${{ matrix.device }}:${{ github.sha }}
  
  build-rtsp-relay:
    name: Build RTSP Relay Container
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./edge_kit/rtsp_relay
          file: ./edge_kit/rtsp_relay/Dockerfile
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/rtsp-relay:latest
            ghcr.io/${{ github.repository_owner }}/rtsp-relay:${{ github.sha }}
  
  build-edge-agent:
    name: Build Edge Agent Container
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./edge_kit/edge_agent
          file: ./edge_kit/edge_agent/Dockerfile
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/edge-agent:latest
            ghcr.io/${{ github.repository_owner }}/edge-agent:${{ github.sha }}
  
  test-ota-update:
    name: Test OTA Update
    runs-on: ubuntu-latest
    needs: [build-edge-inference, build-rtsp-relay, build-edge-agent]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      
      - name: Start Edge Kit
        run: |
          cd edge_kit
          docker-compose up -d
      
      - name: Wait for services to start
        run: sleep 30
      
      - name: Check health
        run: |
          curl -f http://localhost:9090/health
          curl -f http://localhost:8001/health
          curl -f http://localhost:8888/health
      
      - name: Simulate OTA update
        run: |
          # Simulate an OTA update by creating a new version of the edge-agent image
          cd edge_kit
          docker tag ghcr.io/${{ github.repository_owner }}/edge-agent:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/edge-agent:new-version
          
          # Trigger update
          curl -X POST http://localhost:9090/ota/update -H "Content-Type: application/json" -d '{"version": "new-version"}'
          
          # Wait for update to complete
          sleep 30
          
          # Check health after update
          curl -f http://localhost:9090/health
      
      - name: Simulate rollback
        run: |
          # Trigger rollback
          curl -X POST http://localhost:9090/ota/rollback
          
          # Wait for rollback to complete
          sleep 30
          
          # Check health after rollback
          curl -f http://localhost:9090/health
      
      - name: Stop Edge Kit
        run: |
          cd edge_kit
          docker-compose down
