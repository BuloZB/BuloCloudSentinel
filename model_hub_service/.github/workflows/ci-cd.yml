name: Model Hub CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'model_hub_service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'model_hub_service/**'
  workflow_dispatch:

jobs:
  test:
    name: Test Model Hub
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: model_hub_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      minio:
        image: minio/minio:RELEASE.2023-09-30T07-02-29Z
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
          - 9001:9001
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - /tmp/minio-data:/data
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r model_hub_service/requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Create MinIO bucket
        run: |
          pip install minio
          python -c "
          from minio import Minio
          client = Minio(
              'localhost:9000',
              access_key='minioadmin',
              secret_key='minioadmin',
              secure=False
          )
          if not client.bucket_exists('mlflow'):
              client.make_bucket('mlflow')
          "
      
      - name: Run tests
        run: |
          cd model_hub_service
          pytest tests/ --cov=app --cov-report=xml
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: model_hub_test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          MLFLOW_TRACKING_URI: http://localhost:5000
          MLFLOW_S3_ENDPOINT_URL: http://localhost:9000
          AWS_ACCESS_KEY_ID: minioadmin
          AWS_SECRET_ACCESS_KEY: minioadmin
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./model_hub_service/coverage.xml
          fail_ci_if_error: false
  
  lint:
    name: Lint Model Hub
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
      
      - name: Run linters
        run: |
          cd model_hub_service
          flake8 app/ tests/
          black --check app/ tests/
          isort --check-only app/ tests/
          mypy app/
  
  build:
    name: Build Model Hub
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/model-hub
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./model_hub_service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  deploy:
    name: Deploy Model Hub
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '5.0.0'
      
      - name: Update Kubernetes manifests
        run: |
          cd model_hub_service/kubernetes
          kustomize edit set image ghcr.io/bulocloud-sentinel/model-hub:latest=ghcr.io/${{ github.repository }}/model-hub:sha-${{ github.sha }}
      
      - name: Deploy to Kubernetes
        run: |
          cd model_hub_service/kubernetes
          kubectl apply -k .
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
  
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r model_hub_service/requirements.txt
          pip install pytest pytest-asyncio requests
      
      - name: Run integration tests
        run: |
          cd model_hub_service
          pytest tests/test_integration.py -v
        env:
          MODEL_HUB_API_URL: ${{ secrets.MODEL_HUB_API_URL }}
  
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: integration-test
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.integration-test.result == 'success' }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text": "✅ Model Hub deployed successfully"}' \
            ${{ secrets.WEBHOOK_URL }}
      
      - name: Notify failure
        if: ${{ needs.integration-test.result != 'success' }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text": "❌ Model Hub deployment failed"}' \
            ${{ secrets.WEBHOOK_URL }}
