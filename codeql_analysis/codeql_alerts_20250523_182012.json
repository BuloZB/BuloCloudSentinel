[
  {
    "number": 311,
    "created_at": "2025-05-23T16:00:56Z",
    "updated_at": "2025-05-23T16:02:03Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/311",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/311",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/unsafe-deserialization",
      "severity": "error",
      "description": "Deserialization of user-controlled data",
      "name": "py/unsafe-deserialization",
      "tags": [
        "external/cwe/cwe-502",
        "security",
        "serialization"
      ],
      "full_description": "Deserializing user-controlled data may allow attackers to execute arbitrary code.",
      "help": "# Deserialization of user-controlled data\nDeserializing untrusted data using any deserialization framework that allows the construction of arbitrary serializable objects is easily exploitable and in many cases allows an attacker to execute arbitrary code. Even before a deserialized object is returned to the caller of a deserialization method a lot of code may have been executed, including static initializers, constructors, and finalizers. Automatic deserialization of fields means that an attacker may craft a nested combination of objects on which the executed initialization code may have unforeseen effects, such as the execution of arbitrary code.\n\nThere are many different serialization frameworks. This query currently supports Pickle, Marshal and Yaml.\n\n\n## Recommendation\nAvoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON.\n\nIf you need to use YAML, use the `yaml.safe_load` function.\n\n\n## Example\nThe following example calls `pickle.loads` directly on a value provided by an incoming HTTP request. Pickle then creates a new value from untrusted data, and is therefore inherently unsafe.\n\n\n```python\n\nfrom django.conf.urls import url\nimport pickle\n\ndef unsafe(pickled):\n    return pickle.loads(pickled)\n\nurlpatterns = [\n    url(r'^(?P<object>.*)$', unsafe)\n]\n```\nChanging the code to use `json.loads` instead of `pickle.loads` removes the vulnerability.\n\n\n```python\n\nfrom django.conf.urls import url\nimport json\n\ndef safe(pickled):\n    return json.loads(pickled)\n\nurlpatterns = [\n    url(r'^(?P<object>.*)$', safe)\n]\n\n```\n\n## References\n* OWASP vulnerability description: [Deserialization of untrusted data](https://www.owasp.org/index.php/Deserialization_of_untrusted_data).\n* OWASP guidance on deserializing objects: [Deserialization Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html).\n* Talks by Chris Frohoff &amp; Gabriel Lawrence: [ AppSecCali 2015: Marshalling Pickles - how deserializing objects will ruin your day](http://frohoff.github.io/appseccali-marshalling-pickles/)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html).\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Unsafe deserialization depends on a user-provided value.\nUnsafe deserialization depends on a user-provided value.\nUnsafe deserialization depends on a user-provided value.\nUnsafe deserialization depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/security.py",
        "start_line": 284,
        "end_line": 284,
        "start_column": 41,
        "end_column": 50
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/311/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 310,
    "created_at": "2025-05-23T11:46:31Z",
    "updated_at": "2025-05-23T11:46:31Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/310",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/310",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "mapping_service/api/endpoints.py",
        "start_line": 223,
        "end_line": 223,
        "start_column": 12,
        "end_column": 64
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/310/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 309,
    "created_at": "2025-05-23T11:46:31Z",
    "updated_at": "2025-05-23T11:46:31Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/309",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/309",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "mapping_service/api/endpoints.py",
        "start_line": 61,
        "end_line": 61,
        "start_column": 12,
        "end_column": 19
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/309/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 308,
    "created_at": "2025-05-23T11:19:13Z",
    "updated_at": "2025-05-23T11:23:39Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/308",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/308",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/full-ssrf",
      "severity": "error",
      "description": "Full server-side request forgery",
      "name": "py/full-ssrf",
      "tags": [
        "external/cwe/cwe-918",
        "security"
      ],
      "full_description": "Making a network request to a URL that is fully user-controlled allows for request forgery attacks.",
      "help": "# Full server-side request forgery\nDirectly incorporating user input into an HTTP request without validating the input can facilitate server-side request forgery (SSRF) attacks. In these attacks, the request may be changed, directed at a different server, or via a different protocol. This can allow the attacker to obtain sensitive information or perform actions with escalated privilege.\n\nWe make a distinctions between how much of the URL an attacker can control:\n\n* **Full SSRF**: where the full URL can be controlled.\n* **Partial SSRF**: where only part of the URL can be controlled, such as the path component of a URL to a hardcoded domain.\n\n\nPartial control of a URL is often much harder to exploit. Therefore we have created a separate query for each of these.\n\nThis query covers full SSRF, to find partial SSRF use the `py/partial-ssrf` query.\n\n\n## Recommendation\nTo guard against SSRF attacks you should avoid putting user-provided input directly into a request URL. On the application level, maintain a list of authorized URLs on the server and choose from that list based on the input provided. If that is not possible, one should verify the IP address for all user-controlled requests to ensure they are not private. This requires saving the verified IP address of each domain, then utilizing a custom HTTP adapter to ensure that future requests to that domain use the verified IP address. On the network level, you can segment the vulnerable application into its own LAN or block access to specific devices.\n\n\n## Example\nThe following example shows code vulnerable to a full SSRF attack, because it uses untrusted input (HTTP request parameter) directly to construct a URL. By using `evil.com#` as the `target` value, the requested URL will be `https://evil.com#.example.com/data/`. It also shows how to remedy the problem by using the user input select a known fixed string.\n\n\n```python\nimport requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/full_ssrf\")\ndef full_ssrf():\n    target = request.args[\"target\"]\n\n    # BAD: user has full control of URL\n    resp = requests.get(\"https://\" + target + \".example.com/data/\")\n\n    # GOOD: `subdomain` is controlled by the server.\n    subdomain = \"europe\" if target == \"EU\" else \"world\"\n    resp = requests.get(\"https://\" + subdomain + \".example.com/data/\")\n\n```\n\n## Example\nThe following example shows code vulnerable to a partial SSRF attack, because it uses untrusted input (HTTP request parameter) directly to construct a URL. By using `../transfer-funds-to/123?amount=456` as the `user_id` value, the requested URL will be `https://api.example.com/transfer-funds-to/123?amount=456`. It also shows how to remedy the problem by validating the input.\n\n\n```python\nimport requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/partial_ssrf\")\ndef partial_ssrf():\n    user_id = request.args[\"user_id\"]\n\n    # BAD: user can fully control the path component of the URL\n    resp = requests.get(\"https://api.example.com/user_info/\" + user_id)\n\n    if user_id.isalnum():\n        # GOOD: user_id is restricted to be alpha-numeric, and cannot alter path component of URL\n        resp = requests.get(\"https://api.example.com/user_info/\" + user_id)\n\n```\n\n## References\n* [OWASP SSRF article](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n* [PortSwigger SSRF article](https://portswigger.net/web-security/ssrf)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The full URL of this request depends on a user-provided value."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/auths.py",
        "start_line": 578,
        "end_line": 578,
        "start_column": 32,
        "end_column": 64
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/308/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 307,
    "created_at": "2025-05-23T11:10:52Z",
    "updated_at": "2025-05-23T11:10:52Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/307",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/307",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}"
      },
      "location": {
        "path": ".github/workflows/remoteid-service.yml",
        "start_line": 137,
        "end_line": 142,
        "start_column": 5,
        "end_column": 56
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/307/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 306,
    "created_at": "2025-05-23T11:10:52Z",
    "updated_at": "2025-05-23T11:10:52Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/306",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/306",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/remoteid-service.yml",
        "start_line": 124,
        "end_line": 136,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/306/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 305,
    "created_at": "2025-05-23T11:10:52Z",
    "updated_at": "2025-05-23T11:10:52Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/305",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/305",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/remoteid-service.yml",
        "start_line": 107,
        "end_line": 123,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/305/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 304,
    "created_at": "2025-05-23T11:10:52Z",
    "updated_at": "2025-05-23T11:10:52Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/304",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/304",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/remoteid-service.yml",
        "start_line": 61,
        "end_line": 106,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/304/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 303,
    "created_at": "2025-05-23T11:10:52Z",
    "updated_at": "2025-05-23T11:10:52Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/303",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/303",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/remoteid-service.yml",
        "start_line": 40,
        "end_line": 60,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/303/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 302,
    "created_at": "2025-05-23T11:10:52Z",
    "updated_at": "2025-05-23T11:10:52Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/302",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/302",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/remoteid-service.yml",
        "start_line": 13,
        "end_line": 39,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/302/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 301,
    "created_at": "2025-05-23T08:36:38Z",
    "updated_at": "2025-05-23T08:37:29Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/301",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/301",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/unsafe-deserialization",
      "severity": "error",
      "description": "Deserialization of user-controlled data",
      "name": "py/unsafe-deserialization",
      "tags": [
        "external/cwe/cwe-502",
        "security",
        "serialization"
      ],
      "full_description": "Deserializing user-controlled data may allow attackers to execute arbitrary code.",
      "help": "# Deserialization of user-controlled data\nDeserializing untrusted data using any deserialization framework that allows the construction of arbitrary serializable objects is easily exploitable and in many cases allows an attacker to execute arbitrary code. Even before a deserialized object is returned to the caller of a deserialization method a lot of code may have been executed, including static initializers, constructors, and finalizers. Automatic deserialization of fields means that an attacker may craft a nested combination of objects on which the executed initialization code may have unforeseen effects, such as the execution of arbitrary code.\n\nThere are many different serialization frameworks. This query currently supports Pickle, Marshal and Yaml.\n\n\n## Recommendation\nAvoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON.\n\nIf you need to use YAML, use the `yaml.safe_load` function.\n\n\n## Example\nThe following example calls `pickle.loads` directly on a value provided by an incoming HTTP request. Pickle then creates a new value from untrusted data, and is therefore inherently unsafe.\n\n\n```python\n\nfrom django.conf.urls import url\nimport pickle\n\ndef unsafe(pickled):\n    return pickle.loads(pickled)\n\nurlpatterns = [\n    url(r'^(?P<object>.*)$', unsafe)\n]\n```\nChanging the code to use `json.loads` instead of `pickle.loads` removes the vulnerability.\n\n\n```python\n\nfrom django.conf.urls import url\nimport json\n\ndef safe(pickled):\n    return json.loads(pickled)\n\nurlpatterns = [\n    url(r'^(?P<object>.*)$', safe)\n]\n\n```\n\n## References\n* OWASP vulnerability description: [Deserialization of untrusted data](https://www.owasp.org/index.php/Deserialization_of_untrusted_data).\n* OWASP guidance on deserializing objects: [Deserialization Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html).\n* Talks by Chris Frohoff &amp; Gabriel Lawrence: [ AppSecCali 2015: Marshalling Pickles - how deserializing objects will ruin your day](http://frohoff.github.io/appseccali-marshalling-pickles/)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html).\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Unsafe deserialization depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/convert.py",
        "start_line": 652,
        "end_line": 652,
        "start_column": 32,
        "end_column": 42
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/301/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 300,
    "created_at": "2025-05-22T13:10:32Z",
    "updated_at": "2025-05-22T13:10:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/300",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/300",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/security-review.yml",
        "start_line": 110,
        "end_line": 141,
        "start_column": 5,
        "end_column": 37
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/300/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 299,
    "created_at": "2025-05-22T13:10:32Z",
    "updated_at": "2025-05-22T13:10:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/299",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/299",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/security-review.yml",
        "start_line": 75,
        "end_line": 109,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/299/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 298,
    "created_at": "2025-05-22T13:10:32Z",
    "updated_at": "2025-05-22T13:10:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/298",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/298",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/dependency-update.yml",
        "start_line": 8,
        "end_line": 135,
        "start_column": 5,
        "end_column": 34
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/298/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 297,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/297",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/297",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_dock_integration.py",
        "start_line": 676,
        "end_line": 676,
        "start_column": 25,
        "end_column": 120
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/297/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 296,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/296",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/296",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "examples/dji_sdk_demo.py",
        "start_line": 655,
        "end_line": 655,
        "start_column": 33,
        "end_column": 86
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/296/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 295,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/295",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/295",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "examples/dji_sdk_demo.py",
        "start_line": 641,
        "end_line": 641,
        "start_column": 33,
        "end_column": 90
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/295/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 293,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/293",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/293",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "examples/dji_sdk_demo.py",
        "start_line": 574,
        "end_line": 574,
        "start_column": 29,
        "end_column": 137
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/293/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 292,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/292",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/292",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "examples/dji_sdk_demo.py",
        "start_line": 261,
        "end_line": 261,
        "start_column": 33,
        "end_column": 104
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/292/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 291,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/291",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/291",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "examples/dji_sdk_demo.py",
        "start_line": 241,
        "end_line": 241,
        "start_column": 29,
        "end_column": 138
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/291/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 290,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/290",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/290",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "examples/dji_sdk_demo.py",
        "start_line": 175,
        "end_line": 175,
        "start_column": 29,
        "end_column": 167
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/290/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 289,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/289",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/289",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 615,
        "end_line": 615,
        "start_column": 32,
        "end_column": 66
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/289/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 288,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/288",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/288",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 590,
        "end_line": 590,
        "start_column": 29,
        "end_column": 106
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/288/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 287,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/287",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/287",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 568,
        "end_line": 568,
        "start_column": 29,
        "end_column": 75
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/287/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 286,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/286",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/286",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 551,
        "end_line": 551,
        "start_column": 29,
        "end_column": 123
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/286/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 285,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/285",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/285",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 502,
        "end_line": 502,
        "start_column": 29,
        "end_column": 72
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/285/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 284,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/284",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/284",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 494,
        "end_line": 494,
        "start_column": 29,
        "end_column": 60
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/284/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 283,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/283",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/283",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 463,
        "end_line": 463,
        "start_column": 29,
        "end_column": 61
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/283/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 282,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/282",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/282",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 446,
        "end_line": 446,
        "start_column": 29,
        "end_column": 107
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/282/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 281,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/281",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/281",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 435,
        "end_line": 435,
        "start_column": 29,
        "end_column": 61
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/281/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 280,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/280",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/280",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 425,
        "end_line": 425,
        "start_column": 29,
        "end_column": 113
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/280/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 278,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/278",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/278",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 396,
        "end_line": 396,
        "start_column": 29,
        "end_column": 71
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/278/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 277,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/277",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/277",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 391,
        "end_line": 391,
        "start_column": 29,
        "end_column": 84
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/277/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 276,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/276",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/276",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 386,
        "end_line": 386,
        "start_column": 29,
        "end_column": 69
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/276/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 275,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/275",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/275",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 381,
        "end_line": 381,
        "start_column": 29,
        "end_column": 73
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/275/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 274,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/274",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/274",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 376,
        "end_line": 376,
        "start_column": 29,
        "end_column": 61
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/274/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 273,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/273",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/273",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 363,
        "end_line": 363,
        "start_column": 29,
        "end_column": 118
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/273/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 272,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/272",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/272",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "dronecore/dji_adapter.py",
        "start_line": 347,
        "end_line": 347,
        "start_column": 25,
        "end_column": 102
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/272/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 271,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/271",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/271",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "examples/dji_complex_mission.py",
        "start_line": 503,
        "end_line": 503,
        "start_column": 33,
        "end_column": 79
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/271/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 270,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/270",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/270",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "examples/dji_complex_mission.py",
        "start_line": 299,
        "end_line": 299,
        "start_column": 30,
        "end_column": 88
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/270/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 269,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/269",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/269",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "examples/dji_complex_mission.py",
        "start_line": 252,
        "end_line": 252,
        "start_column": 25,
        "end_column": 68
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/269/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 268,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/268",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/268",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/flask-debug",
      "severity": "error",
      "description": "Flask app is run in debug mode",
      "name": "py/flask-debug",
      "tags": [
        "external/cwe/cwe-215",
        "external/cwe/cwe-489",
        "security"
      ],
      "full_description": "Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.",
      "help": "# Flask app is run in debug mode\nRunning a Flask application with debug mode enabled may allow an attacker to gain access through the Werkzeug debugger.\n\n\n## Recommendation\nEnsure that Flask applications that are run in a production environment have debugging disabled.\n\n\n## Example\nRunning the following code starts a Flask webserver that has debugging enabled. By visiting `/crash`, it is possible to gain access to the debugger, and run arbitrary code through the interactive debugger.\n\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/crash')\ndef main():\n    raise Exception()\n\napp.run(debug=True)\n\n```\n\n## References\n* Flask Quickstart Documentation: [Debug Mode](http://flask.pocoo.org/docs/1.0/quickstart/#debug-mode).\n* Werkzeug Documentation: [Debugging Applications](http://werkzeug.pocoo.org/docs/0.14/debug/).\n* Common Weakness Enumeration: [CWE-215](https://cwe.mitre.org/data/definitions/215.html).\n* Common Weakness Enumeration: [CWE-489](https://cwe.mitre.org/data/definitions/489.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "A Flask app appears to be run in debug mode. This may allow an attacker to run arbitrary code through the debugger."
      },
      "location": {
        "path": "web/run_mission_planner.py",
        "start_line": 22,
        "end_line": 22,
        "start_column": 5,
        "end_column": 51
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/268/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 267,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/267",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/267",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 476,
        "end_line": 476,
        "start_column": 24,
        "end_column": 59
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/267/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 266,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/266",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/266",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 308,
        "end_line": 308,
        "start_column": 24,
        "end_column": 59
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/266/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 265,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/265",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/265",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 293,
        "end_line": 293,
        "start_column": 24,
        "end_column": 59
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/265/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 264,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/264",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/264",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 271,
        "end_line": 271,
        "start_column": 24,
        "end_column": 59
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/264/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 263,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/263",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/263",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 249,
        "end_line": 249,
        "start_column": 24,
        "end_column": 59
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/263/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 262,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/262",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/262",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 210,
        "end_line": 210,
        "start_column": 24,
        "end_column": 59
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/262/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 261,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/261",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/261",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 323,
        "end_line": 323,
        "start_column": 27,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/261/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 260,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/260",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/260",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 304,
        "end_line": 304,
        "start_column": 19,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/260/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 259,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/259",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/259",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 300,
        "end_line": 300,
        "start_column": 27,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/259/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 258,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/258",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/258",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 287,
        "end_line": 287,
        "start_column": 19,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/258/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 257,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/257",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/257",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 278,
        "end_line": 278,
        "start_column": 27,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/257/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 256,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/256",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/256",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 265,
        "end_line": 265,
        "start_column": 19,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/256/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 255,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/255",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/255",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 244,
        "end_line": 244,
        "start_column": 19,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/255/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 254,
    "created_at": "2025-05-17T23:35:10Z",
    "updated_at": "2025-05-17T23:35:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/254",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/254",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "web/dji_mission_planner.py",
        "start_line": 240,
        "end_line": 240,
        "start_column": 27,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/254/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 253,
    "created_at": "2025-05-17T23:35:06Z",
    "updated_at": "2025-05-17T23:35:06Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/253",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/253",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/clear-text-storage-of-sensitive-data",
      "severity": "error",
      "description": "Clear text storage of sensitive information",
      "name": "js/clear-text-storage-of-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-315",
        "external/cwe/cwe-359",
        "security"
      ],
      "full_description": "Sensitive information stored without encryption or hashing can expose it to an attacker.",
      "help": "# Clear text storage of sensitive information\nSensitive information that is stored unencrypted is accessible to an attacker who gains access to the storage. This is particularly important for cookies, which are stored on the machine of the end-user.\n\n\n## Recommendation\nEnsure that sensitive information is always encrypted before being stored. If possible, avoid placing sensitive information in cookies altogether. Instead, prefer storing, in the cookie, a key that can be used to look up the sensitive information.\n\nIn general, decrypt sensitive information only at the point where it is necessary for it to be used in cleartext.\n\nBe aware that external processes often store the `standard out` and `standard error` streams of the application, causing logged sensitive information to be stored as well.\n\n\n## Example\nThe following example code stores user credentials (in this case, their password) in a cookie in plain text:\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\napp.get('/remember-password', function (req, res) {\n  let pw = req.param(\"current_password\");\n  // BAD: Setting a cookie value with cleartext sensitive data.\n  res.cookie(\"password\", pw);\n});\n\n```\nInstead, the credentials should be encrypted, for instance by using the Node.js `crypto` module:\n\n\n```javascript\nvar express = require('express');\nvar crypto = require('crypto'),\n    password = getPassword();\n\nfunction encrypt(text){\n  var cipher = crypto.createCipher('aes-256-ctr', password);\n  return cipher.update(text, 'utf8', 'hex') + cipher.final('hex');\n}\n\nvar app = express();\napp.get('/remember-password', function (req, res) {\n  let pw = req.param(\"current_password\");\n  // GOOD: Encoding the value before setting it.\n  res.cookie(\"password\", encrypt(pw));\n});\n\n```\n\n## References\n* M. Dowd, J. McDonald and J. Schuhm, *The Art of Software Security Assessment*, 1st Edition, Chapter 2 - 'Common Vulnerabilities of Encryption', p. 43. Addison Wesley, 2006.\n* M. Howard and D. LeBlanc, *Writing Secure Code*, 2nd Edition, Chapter 9 - 'Protecting Secret Data', p. 299. Microsoft, 2002.\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-315](https://cwe.mitre.org/data/definitions/315.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This stores sensitive data returned by a call to getElementById as clear text.\nThis stores sensitive data returned by an access to apiSecret as clear text."
      },
      "location": {
        "path": "web/static/js/app_part2.js",
        "start_line": 88,
        "end_line": 88,
        "start_column": 44,
        "end_column": 70
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/253/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 252,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/252",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/252",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/safety.yml",
        "start_line": 13,
        "end_line": 57,
        "start_column": 5,
        "end_column": 34
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/252/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 251,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/251",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/251",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/run-all-workflows.yml",
        "start_line": 10,
        "end_line": 89,
        "start_column": 5,
        "end_column": 55
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/251/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 250,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/250",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/250",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 302,
        "end_line": 340,
        "start_column": 5,
        "end_column": 61
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/250/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 249,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/249",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/249",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 261,
        "end_line": 301,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/249/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 248,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/248",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/248",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}"
      },
      "location": {
        "path": ".github/workflows/always-succeed.yml",
        "start_line": 165,
        "end_line": 172,
        "start_column": 5,
        "end_column": 18
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/248/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 247,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/247",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/247",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/always-succeed.yml",
        "start_line": 148,
        "end_line": 164,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/247/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 246,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/246",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/246",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/always-succeed.yml",
        "start_line": 115,
        "end_line": 147,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/246/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 245,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/245",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/245",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 80,
        "end_line": 172,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/245/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 244,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/244",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/244",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/always-succeed.yml",
        "start_line": 82,
        "end_line": 114,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/244/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 243,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/243",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/243",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/always-succeed.yml",
        "start_line": 47,
        "end_line": 81,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/243/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 242,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/242",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/242",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 15,
        "end_line": 79,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/242/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 241,
    "created_at": "2025-05-17T23:34:32Z",
    "updated_at": "2025-05-17T23:34:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/241",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/241",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/always-succeed.yml",
        "start_line": 14,
        "end_line": 46,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/241/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 239,
    "created_at": "2025-05-13T09:32:48Z",
    "updated_at": "2025-05-13T09:32:48Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/239",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/239",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "weather_guard/weather_guard/services/weather.py",
        "start_line": 251,
        "end_line": 251,
        "start_column": 77,
        "end_column": 86
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/239/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 238,
    "created_at": "2025-05-13T09:32:48Z",
    "updated_at": "2025-05-13T09:32:48Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/238",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/238",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "weather_guard/weather_guard/services/weather.py",
        "start_line": 251,
        "end_line": 251,
        "start_column": 67,
        "end_column": 75
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/238/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 237,
    "created_at": "2025-05-13T09:32:48Z",
    "updated_at": "2025-05-13T09:32:48Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/237",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/237",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "weather_guard/weather_guard/services/weather.py",
        "start_line": 168,
        "end_line": 168,
        "start_column": 76,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/237/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 236,
    "created_at": "2025-05-13T09:32:48Z",
    "updated_at": "2025-05-13T09:32:48Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/236",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/236",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "weather_guard/weather_guard/services/weather.py",
        "start_line": 168,
        "end_line": 168,
        "start_column": 66,
        "end_column": 74
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/236/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 235,
    "created_at": "2025-05-13T09:32:48Z",
    "updated_at": "2025-05-13T09:32:48Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/235",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/235",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "weather_guard/weather_guard/services/weather.py",
        "start_line": 108,
        "end_line": 108,
        "start_column": 17,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/235/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 234,
    "created_at": "2025-05-13T09:32:48Z",
    "updated_at": "2025-05-13T09:32:48Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/234",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/234",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "weather_guard/weather_guard/services/weather.py",
        "start_line": 107,
        "end_line": 107,
        "start_column": 17,
        "end_column": 38
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/234/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 228,
    "created_at": "2025-05-09T11:20:05Z",
    "updated_at": "2025-05-22T13:10:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/228",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/228",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/security-review.yml",
        "start_line": 42,
        "end_line": 74,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/228/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 227,
    "created_at": "2025-05-09T11:20:05Z",
    "updated_at": "2025-05-22T13:10:32Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/227",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/227",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/security-review.yml",
        "start_line": 9,
        "end_line": 41,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/227/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 225,
    "created_at": "2025-05-09T11:11:09Z",
    "updated_at": "2025-05-09T11:11:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/225",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/225",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-storage-sensitive-data",
      "severity": "error",
      "description": "Clear-text storage of sensitive information",
      "name": "py/clear-text-storage-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-315",
        "external/cwe/cwe-359",
        "security"
      ],
      "full_description": "Sensitive information stored without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text storage of sensitive information\nSensitive information that is stored unencrypted is accessible to an attacker who gains access to the storage. This is particularly important for cookies, which are stored on the machine of the end-user.\n\n\n## Recommendation\nEnsure that sensitive information is always encrypted before being stored. If possible, avoid placing sensitive information in cookies altogether. Instead, prefer storing, in the cookie, a key that can be used to look up the sensitive information.\n\nIn general, decrypt sensitive information only at the point where it is necessary for it to be used in cleartext.\n\nBe aware that external processes often store the `standard out` and `standard error` streams of the application, causing logged sensitive information to be stored as well.\n\n\n## Example\nThe following example code stores user credentials (in this case, their password) in a cookie in plain text:\n\n\n```python\nfrom flask import Flask, make_response, request\n\napp = Flask(\"Leak password\")\n\n@app.route('/')\ndef index():\n    password = request.args.get(\"password\")\n    resp = make_response(render_template(...))\n    resp.set_cookie(\"password\", password)\n    return resp\n\n```\nInstead, the credentials should be encrypted, for instance by using the `cryptography` module, or not stored at all.\n\n\n## References\n* M. Dowd, J. McDonald and J. Schuhm, *The Art of Software Security Assessment*, 1st Edition, Chapter 2 - 'Common Vulnerabilities of Encryption', p. 43. Addison Wesley, 2006.\n* M. Howard and D. LeBlanc, *Writing Secure Code*, 2nd Edition, Chapter 9 - 'Protecting Secret Data', p. 299. Microsoft, 2002.\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-315](https://cwe.mitre.org/data/definitions/315.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression stores sensitive data (secret) as clear text.\nThis expression stores sensitive data (secret) as clear text.\nThis expression stores sensitive data (secret) as clear text.\nThis expression stores sensitive data (secret) as clear text.\nThis expression stores sensitive data (secret) as clear text.\nThis expression stores sensitive data (secret) as clear text."
      },
      "location": {
        "path": "scripts/scheduled_security_scan.py",
        "start_line": 227,
        "end_line": 227,
        "start_column": 25,
        "end_column": 53
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/225/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 224,
    "created_at": "2025-05-09T11:11:09Z",
    "updated_at": "2025-05-09T11:11:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/224",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/224",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-storage-sensitive-data",
      "severity": "error",
      "description": "Clear-text storage of sensitive information",
      "name": "py/clear-text-storage-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-315",
        "external/cwe/cwe-359",
        "security"
      ],
      "full_description": "Sensitive information stored without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text storage of sensitive information\nSensitive information that is stored unencrypted is accessible to an attacker who gains access to the storage. This is particularly important for cookies, which are stored on the machine of the end-user.\n\n\n## Recommendation\nEnsure that sensitive information is always encrypted before being stored. If possible, avoid placing sensitive information in cookies altogether. Instead, prefer storing, in the cookie, a key that can be used to look up the sensitive information.\n\nIn general, decrypt sensitive information only at the point where it is necessary for it to be used in cleartext.\n\nBe aware that external processes often store the `standard out` and `standard error` streams of the application, causing logged sensitive information to be stored as well.\n\n\n## Example\nThe following example code stores user credentials (in this case, their password) in a cookie in plain text:\n\n\n```python\nfrom flask import Flask, make_response, request\n\napp = Flask(\"Leak password\")\n\n@app.route('/')\ndef index():\n    password = request.args.get(\"password\")\n    resp = make_response(render_template(...))\n    resp.set_cookie(\"password\", password)\n    return resp\n\n```\nInstead, the credentials should be encrypted, for instance by using the `cryptography` module, or not stored at all.\n\n\n## References\n* M. Dowd, J. McDonald and J. Schuhm, *The Art of Software Security Assessment*, 1st Edition, Chapter 2 - 'Common Vulnerabilities of Encryption', p. 43. Addison Wesley, 2006.\n* M. Howard and D. LeBlanc, *Writing Secure Code*, 2nd Edition, Chapter 9 - 'Protecting Secret Data', p. 299. Microsoft, 2002.\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-315](https://cwe.mitre.org/data/definitions/315.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression stores sensitive data (secret) as clear text.\nThis expression stores sensitive data (secret) as clear text.\nThis expression stores sensitive data (secret) as clear text.\nThis expression stores sensitive data (secret) as clear text.\nThis expression stores sensitive data (secret) as clear text.\nThis expression stores sensitive data (secret) as clear text."
      },
      "location": {
        "path": "scripts/monitor_security_reports.py",
        "start_line": 318,
        "end_line": 318,
        "start_column": 21,
        "end_column": 28
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/224/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 223,
    "created_at": "2025-05-09T11:11:09Z",
    "updated_at": "2025-05-09T11:11:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/223",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/223",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "scripts/monitor_security_reports.py",
        "start_line": 183,
        "end_line": 183,
        "start_column": 22,
        "end_column": 80
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/223/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 222,
    "created_at": "2025-05-09T11:11:09Z",
    "updated_at": "2025-05-09T11:11:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/222",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/222",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "scripts/monitor_security_reports.py",
        "start_line": 146,
        "end_line": 146,
        "start_column": 17,
        "end_column": 60
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/222/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 221,
    "created_at": "2025-05-09T11:11:09Z",
    "updated_at": "2025-05-09T11:11:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/221",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/221",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "scripts/monitor_security_reports.py",
        "start_line": 133,
        "end_line": 133,
        "start_column": 22,
        "end_column": 78
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/221/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 220,
    "created_at": "2025-05-09T11:11:09Z",
    "updated_at": "2025-05-09T11:11:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/220",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/220",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "scripts/monitor_security_reports.py",
        "start_line": 127,
        "end_line": 127,
        "start_column": 17,
        "end_column": 58
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/220/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 219,
    "created_at": "2025-05-09T11:11:09Z",
    "updated_at": "2025-05-09T11:11:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/219",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/219",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "scripts/monitor_security_reports.py",
        "start_line": 114,
        "end_line": 114,
        "start_column": 22,
        "end_column": 76
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/219/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 218,
    "created_at": "2025-05-09T11:11:09Z",
    "updated_at": "2025-05-09T11:11:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/218",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/218",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "scripts/monitor_security_reports.py",
        "start_line": 108,
        "end_line": 108,
        "start_column": 17,
        "end_column": 56
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/218/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 217,
    "created_at": "2025-05-09T11:11:09Z",
    "updated_at": "2025-05-09T11:11:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/217",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/217",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "scripts/monitor_security_reports.py",
        "start_line": 95,
        "end_line": 95,
        "start_column": 22,
        "end_column": 82
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/217/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 216,
    "created_at": "2025-05-09T11:11:09Z",
    "updated_at": "2025-05-09T11:11:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/216",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/216",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "scripts/monitor_security_reports.py",
        "start_line": 89,
        "end_line": 89,
        "start_column": 17,
        "end_column": 62
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/216/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 215,
    "created_at": "2025-05-09T10:17:53Z",
    "updated_at": "2025-05-09T10:17:53Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/215",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/215",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "weather_guard/examples/weather_guard_demo.py",
        "start_line": 47,
        "end_line": 47,
        "start_column": 15,
        "end_column": 103
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/215/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 214,
    "created_at": "2025-05-09T10:17:53Z",
    "updated_at": "2025-05-09T10:17:53Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/214",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/214",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "weather_guard/examples/weather_guard_demo.py",
        "start_line": 38,
        "end_line": 38,
        "start_column": 15,
        "end_column": 81
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/214/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 210,
    "created_at": "2025-05-09T09:10:09Z",
    "updated_at": "2025-05-09T09:10:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/210",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/210",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "federated_learning/server/server.py",
        "start_line": 332,
        "end_line": 332,
        "start_column": 19,
        "end_column": 30
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/210/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 209,
    "created_at": "2025-05-09T09:10:09Z",
    "updated_at": "2025-05-09T09:10:10Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/209",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/209",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "federated_learning/server/server.py",
        "start_line": 331,
        "end_line": 331,
        "start_column": 39,
        "end_column": 50
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/209/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 198,
    "created_at": "2025-05-08T20:02:25Z",
    "updated_at": "2025-05-08T20:02:26Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/198",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/198",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/command-line-injection",
      "severity": "error",
      "description": "Uncontrolled command line",
      "name": "py/command-line-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-078",
        "external/cwe/cwe-088",
        "security"
      ],
      "full_description": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
      "help": "# Uncontrolled command line\nCode that passes user input directly to `exec`, `eval`, or some other library routine that executes a command, allows the user to execute malicious code.\n\n\n## Recommendation\nIf possible, use hard-coded string literals to specify the command to run or the library to load. Instead of passing the user input directly to the process or library function, examine the user input and then choose among hard-coded string literals.\n\nIf the applicable libraries or commands cannot be determined at compile time, then add code to verify that the user input string is safe before using it.\n\n\n## Example\nThe following example shows two functions. The first is unsafe as it takes a shell script that can be changed by a user, and passes it straight to `subprocess.call()` without examining it first. The second is safe as it selects the command from a predefined allowlist.\n\n\n```python\n\nurlpatterns = [\n    # Route to command_execution\n    url(r'^command-ex1$', command_execution_unsafe, name='command-execution-unsafe'),\n    url(r'^command-ex2$', command_execution_safe, name='command-execution-safe')\n]\n\nCOMMANDS = {\n    \"list\" :\"ls\",\n    \"stat\" : \"stat\"\n}\n\ndef command_execution_unsafe(request):\n    if request.method == 'POST':\n        action = request.POST.get('action', '')\n        #BAD -- No sanitizing of input\n        subprocess.call([\"application\", action])\n\ndef command_execution_safe(request):\n    if request.method == 'POST':\n        action = request.POST.get('action', '')\n        #GOOD -- Use an allowlist\n        subprocess.call([\"application\", COMMANDS[action]])\n\n```\n\n## References\n* OWASP: [Command Injection](https://www.owasp.org/index.php/Command_Injection).\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-88](https://cwe.mitre.org/data/definitions/88.html).\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This command line depends on a user-provided value."
      },
      "location": {
        "path": "edge_kit/rtsp_relay/src/stream_manager.py",
        "start_line": 244,
        "end_line": 244,
        "start_column": 17,
        "end_column": 27
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/198/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 197,
    "created_at": "2025-05-08T20:02:25Z",
    "updated_at": "2025-05-08T20:02:26Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/197",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/197",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/reflective-xss",
      "severity": "error",
      "description": "Reflected server-side cross-site scripting",
      "name": "py/reflective-xss",
      "tags": [
        "external/cwe/cwe-079",
        "external/cwe/cwe-116",
        "security"
      ],
      "full_description": "Writing user input directly to a web page allows for a cross-site scripting vulnerability.",
      "help": "# Reflected server-side cross-site scripting\nDirectly writing user input (for example, an HTTP request parameter) to a webpage without properly sanitizing the input first, allows for a cross-site scripting vulnerability.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider escaping the input before writing user input to the page. The standard library provides escaping functions: `html.escape()` for Python 3.2 upwards or `cgi.escape()` older versions of Python. Most frameworks also provide their own escaping functions, for example `flask.escape()`.\n\n\n## Example\nThe following example is a minimal flask app which shows a safe and unsafe way to render the given name back to the page. The first view is unsafe as `first_name` is not escaped, leaving the page vulnerable to cross-site scripting attacks. The second view is safe as `first_name` is escaped, so it is not vulnerable to cross-site scripting attacks.\n\n\n```python\nfrom flask import Flask, request, make_response, escape\n\napp = Flask(__name__)\n\n@app.route('/unsafe')\ndef unsafe():\n    first_name = request.args.get('name', '')\n    return make_response(\"Your name is \" + first_name)\n\n@app.route('/safe')\ndef safe():\n    first_name = request.args.get('name', '')\n    return make_response(\"Your name is \" + escape(first_name))\n\n```\n\n## References\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Python Library Reference: [html.escape()](https://docs.python.org/3/library/html.html#html.escape).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Cross-site scripting vulnerability due to a user-provided value."
      },
      "location": {
        "path": "edge_kit/rtsp_relay/src/server.py",
        "start_line": 208,
        "end_line": 208,
        "start_column": 37,
        "end_column": 49
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/197/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 196,
    "created_at": "2025-05-08T20:02:25Z",
    "updated_at": "2025-05-08T20:02:26Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/196",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/196",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "edge_kit/rtsp_relay/src/stream_manager.py",
        "start_line": 331,
        "end_line": 331,
        "start_column": 31,
        "end_column": 44
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/196/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 195,
    "created_at": "2025-05-08T20:02:25Z",
    "updated_at": "2025-05-08T20:02:26Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/195",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/195",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "edge_kit/rtsp_relay/src/stream_manager.py",
        "start_line": 224,
        "end_line": 224,
        "start_column": 25,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/195/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 194,
    "created_at": "2025-05-08T20:02:25Z",
    "updated_at": "2025-05-08T20:02:26Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/194",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/194",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "edge_kit/rtsp_relay/src/server.py",
        "start_line": 161,
        "end_line": 161,
        "start_column": 29,
        "end_column": 42
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/194/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 193,
    "created_at": "2025-05-08T20:01:03Z",
    "updated_at": "2025-05-08T20:01:03Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/193",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/193",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/edge-kit-build.yml",
        "start_line": 127,
        "end_line": 184,
        "start_column": 5,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/193/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 192,
    "created_at": "2025-05-08T20:01:03Z",
    "updated_at": "2025-05-08T20:01:03Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/192",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/192",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/edge-kit-build.yml",
        "start_line": 92,
        "end_line": 126,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/192/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 191,
    "created_at": "2025-05-08T20:01:03Z",
    "updated_at": "2025-05-08T20:01:03Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/191",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/191",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/edge-kit-build.yml",
        "start_line": 57,
        "end_line": 91,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/191/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 190,
    "created_at": "2025-05-08T20:01:03Z",
    "updated_at": "2025-05-08T20:01:03Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/190",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/190",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/edge-kit-build.yml",
        "start_line": 19,
        "end_line": 56,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/190/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 189,
    "created_at": "2025-05-08T19:44:01Z",
    "updated_at": "2025-05-08T19:44:02Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/189",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/189",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/sim.yml",
        "start_line": 20,
        "end_line": 96,
        "start_column": 5,
        "end_column": 35
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/189/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 184,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/184",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/184",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/bad-tag-filter",
      "severity": "warning",
      "description": "Bad HTML filtering regexp",
      "name": "py/bad-tag-filter",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "external/cwe/cwe-116",
        "external/cwe/cwe-185",
        "external/cwe/cwe-186",
        "security"
      ],
      "full_description": "Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.",
      "help": "# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```python\nimport re\n\ndef filterScriptTags(content): \n    oldContent = \"\"\n    while oldContent != content:\n        oldContent = content\n        content = re.sub(r'<script.*?>.*?</script>', '', content, flags= re.DOTALL | re.IGNORECASE)\n    return content\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression does not match script end tags like </script >."
      },
      "location": {
        "path": "security/validation/unified_validation.py",
        "start_line": 38,
        "end_line": 38,
        "start_column": 29,
        "end_column": 58
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/184/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 183,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/183",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/183",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "ai/inference/config.py",
        "start_line": 210,
        "end_line": 210,
        "start_column": 25,
        "end_column": 93
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/183/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 182,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/182",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/182",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "ai/inference/config.py",
        "start_line": 84,
        "end_line": 84,
        "start_column": 32,
        "end_column": 77
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/182/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 181,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/181",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/181",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "ai/inference/config.py",
        "start_line": 82,
        "end_line": 82,
        "start_column": 29,
        "end_column": 71
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/181/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 179,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/179",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/179",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/redos",
      "severity": "error",
      "description": "Inefficient regular expression",
      "name": "py/redos",
      "tags": [
        "external/cwe/cwe-1333",
        "external/cwe/cwe-400",
        "external/cwe/cwe-730",
        "security"
      ],
      "full_description": "A regular expression that requires exponential time to match certain inputs can be a performance bottleneck, and may be vulnerable to denial-of-service attacks.",
      "help": "# Inefficient regular expression\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engine provided by Python uses a backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this regular expression:\n\n```python\n\n^_(__|.)+_$\n```\nIts sub-expression `\"(__|.)+?\"` can match the string `\"__\"` either by the first alternative `\"__\"` to the left of the `\"|\"` operator, or by two repetitions of the second alternative `\".\"` to the right. Thus, a string consisting of an odd number of underscores followed by some other character will cause the regular expression engine to run for an exponential amount of time before rejecting the input.\n\nThis problem can be avoided by rewriting the regular expression to remove the ambiguity between the two branches of the alternative inside the repetition:\n\n```python\n\n^_(__|[^_])+_$\n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This part of the regular expression may cause exponential backtracking on strings starting with '<A A=' and containing many repetitions of '  A='."
      },
      "location": {
        "path": "security/validation/unified_validation.py",
        "start_line": 36,
        "end_line": 36,
        "start_column": 87,
        "end_column": 90
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/179/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 178,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/178",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/178",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/redos",
      "severity": "error",
      "description": "Inefficient regular expression",
      "name": "py/redos",
      "tags": [
        "external/cwe/cwe-1333",
        "external/cwe/cwe-400",
        "external/cwe/cwe-730",
        "security"
      ],
      "full_description": "A regular expression that requires exponential time to match certain inputs can be a performance bottleneck, and may be vulnerable to denial-of-service attacks.",
      "help": "# Inefficient regular expression\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engine provided by Python uses a backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this regular expression:\n\n```python\n\n^_(__|.)+_$\n```\nIts sub-expression `\"(__|.)+?\"` can match the string `\"__\"` either by the first alternative `\"__\"` to the left of the `\"|\"` operator, or by two repetitions of the second alternative `\".\"` to the right. Thus, a string consisting of an odd number of underscores followed by some other character will cause the regular expression engine to run for an exponential amount of time before rejecting the input.\n\nThis problem can be avoided by rewriting the regular expression to remove the ambiguity between the two branches of the alternative inside the repetition:\n\n```python\n\n^_(__|[^_])+_$\n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This part of the regular expression may cause exponential backtracking on strings containing many repetitions of ' '."
      },
      "location": {
        "path": "security/validation/unified_validation.py",
        "start_line": 26,
        "end_line": 26,
        "start_column": 71,
        "end_column": 82
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/178/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 177,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/177",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/177",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value.\nThis path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/web_converter.py",
        "start_line": 126,
        "end_line": 126,
        "start_column": 21,
        "end_column": 49
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/177/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 176,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/176",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/176",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value.\nThis path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/web_converter.py",
        "start_line": 191,
        "end_line": 191,
        "start_column": 30,
        "end_column": 41
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/176/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 175,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/175",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/175",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value.\nThis path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/web_converter.py",
        "start_line": 169,
        "end_line": 169,
        "start_column": 30,
        "end_column": 41
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/175/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 174,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/174",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/174",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value.\nThis path depends on a user-provided value.\nThis path depends on a user-provided value.\nThis path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/security.py",
        "start_line": 60,
        "end_line": 60,
        "start_column": 31,
        "end_column": 40
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/174/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 173,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/173",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/173",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value.\nThis path depends on a user-provided value.\nThis path depends on a user-provided value.\nThis path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/security.py",
        "start_line": 55,
        "end_line": 55,
        "start_column": 31,
        "end_column": 40
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/173/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 172,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/172",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/172",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/model_manager.py",
        "start_line": 741,
        "end_line": 741,
        "start_column": 31,
        "end_column": 41
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/172/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 171,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/171",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/171",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/model_manager.py",
        "start_line": 733,
        "end_line": 733,
        "start_column": 31,
        "end_column": 46
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/171/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 170,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/170",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/170",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/model_manager.py",
        "start_line": 340,
        "end_line": 340,
        "start_column": 31,
        "end_column": 40
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/170/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 169,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/169",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/169",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/model_manager.py",
        "start_line": 275,
        "end_line": 275,
        "start_column": 19,
        "end_column": 28
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/169/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 168,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/168",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/168",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/model_manager.py",
        "start_line": 266,
        "end_line": 266,
        "start_column": 31,
        "end_column": 40
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/168/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 167,
    "created_at": "2025-05-02T17:12:33Z",
    "updated_at": "2025-05-02T17:12:33Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/167",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/167",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/model_manager.py",
        "start_line": 257,
        "end_line": 257,
        "start_column": 31,
        "end_column": 40
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/167/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 163,
    "created_at": "2025-05-01T16:49:24Z",
    "updated_at": "2025-05-01T16:49:24Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/163",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/163",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/web_converter.py",
        "start_line": 374,
        "end_line": 374,
        "start_column": 56,
        "end_column": 60
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/163/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 150,
    "created_at": "2025-05-01T16:49:24Z",
    "updated_at": "2025-05-01T16:49:24Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/150",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/150",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/model_manager.py",
        "start_line": 558,
        "end_line": 558,
        "start_column": 31,
        "end_column": 40
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/150/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 149,
    "created_at": "2025-05-01T16:49:24Z",
    "updated_at": "2025-05-01T16:49:24Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/149",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/149",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/model_manager.py",
        "start_line": 428,
        "end_line": 428,
        "start_column": 31,
        "end_column": 40
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/149/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 145,
    "created_at": "2025-05-01T16:49:24Z",
    "updated_at": "2025-05-01T16:49:24Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/145",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/145",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/convert.py",
        "start_line": 528,
        "end_line": 528,
        "start_column": 23,
        "end_column": 34
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/145/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 143,
    "created_at": "2025-05-01T16:49:24Z",
    "updated_at": "2025-05-01T16:49:24Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/143",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/143",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/convert.py",
        "start_line": 452,
        "end_line": 452,
        "start_column": 23,
        "end_column": 34
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/143/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 141,
    "created_at": "2025-05-01T16:49:24Z",
    "updated_at": "2025-05-01T16:49:24Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/141",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/141",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/convert.py",
        "start_line": 369,
        "end_line": 369,
        "start_column": 23,
        "end_column": 34
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/141/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 140,
    "created_at": "2025-05-01T16:49:24Z",
    "updated_at": "2025-05-01T16:49:24Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/140",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/140",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/convert.py",
        "start_line": 190,
        "end_line": 190,
        "start_column": 23,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/140/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 139,
    "created_at": "2025-05-01T16:49:24Z",
    "updated_at": "2025-05-01T16:49:24Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/139",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/139",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/convert.py",
        "start_line": 184,
        "end_line": 184,
        "start_column": 23,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/139/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 138,
    "created_at": "2025-05-01T16:49:24Z",
    "updated_at": "2025-05-01T16:49:24Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/138",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/138",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "ai/inference/convert.py",
        "start_line": 178,
        "end_line": 178,
        "start_column": 23,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/138/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 132,
    "created_at": "2025-04-30T09:10:12Z",
    "updated_at": "2025-04-30T09:10:12Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/132",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/132",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/overly-large-range",
      "severity": "warning",
      "description": "Overly permissive regular expression range",
      "name": "js/overly-large-range",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.",
      "help": "# Overly permissive regular expression range\nIt's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \\ ] ^ _ ` ``.\n\nAnother common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.\n\n\n## Recommendation\nAvoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.\n\n\n## Example\nThe following example code is intended to check whether a string is a valid 6 digit hex color.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9a-fA-f]{6}$/i.test(color);\n}\n\n```\nHowever, the `A-f` range is overly large and matches every uppercase character. It would parse a \"color\" like `#XXYYZZ` as valid.\n\nThe fix is to use an uppercase `A-F` range instead.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9A-F]{6}$/i.test(color);\n}\n\n```\n\n## References\n* GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)\n* wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)\n* Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)\n* Paul Boyd: [The regex \\[,-.\\]](https://pboyd.io/posts/comma-dash-dot/)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Suspicious character range that is equivalent to \\[A-Z\\\\[\\\\\\\\]^_`a-z\\]."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/static/swagger-ui/swagger-ui-bundle.js",
        "start_line": 5354,
        "end_line": 5354,
        "start_column": 77,
        "end_column": 80
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/132/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 131,
    "created_at": "2025-04-30T09:10:12Z",
    "updated_at": "2025-04-30T09:10:12Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/131",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/131",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/overly-large-range",
      "severity": "warning",
      "description": "Overly permissive regular expression range",
      "name": "js/overly-large-range",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.",
      "help": "# Overly permissive regular expression range\nIt's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \\ ] ^ _ ` ``.\n\nAnother common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.\n\n\n## Recommendation\nAvoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.\n\n\n## Example\nThe following example code is intended to check whether a string is a valid 6 digit hex color.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9a-fA-f]{6}$/i.test(color);\n}\n\n```\nHowever, the `A-f` range is overly large and matches every uppercase character. It would parse a \"color\" like `#XXYYZZ` as valid.\n\nThe fix is to use an uppercase `A-F` range instead.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9A-F]{6}$/i.test(color);\n}\n\n```\n\n## References\n* GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)\n* wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)\n* Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)\n* Paul Boyd: [The regex \\[,-.\\]](https://pboyd.io/posts/comma-dash-dot/)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Suspicious character range that is equivalent to \\[A-Z\\\\[\\\\\\\\]^_`a-z\\]."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/static/swagger-ui/swagger-ui-bundle.js",
        "start_line": 5354,
        "end_line": 5354,
        "start_column": 62,
        "end_column": 65
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/131/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 130,
    "created_at": "2025-04-30T09:10:12Z",
    "updated_at": "2025-04-30T09:10:12Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/130",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/130",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/overly-large-range",
      "severity": "warning",
      "description": "Overly permissive regular expression range",
      "name": "js/overly-large-range",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.",
      "help": "# Overly permissive regular expression range\nIt's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \\ ] ^ _ ` ``.\n\nAnother common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.\n\n\n## Recommendation\nAvoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.\n\n\n## Example\nThe following example code is intended to check whether a string is a valid 6 digit hex color.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9a-fA-f]{6}$/i.test(color);\n}\n\n```\nHowever, the `A-f` range is overly large and matches every uppercase character. It would parse a \"color\" like `#XXYYZZ` as valid.\n\nThe fix is to use an uppercase `A-F` range instead.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9A-F]{6}$/i.test(color);\n}\n\n```\n\n## References\n* GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)\n* wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)\n* Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)\n* Paul Boyd: [The regex \\[,-.\\]](https://pboyd.io/posts/comma-dash-dot/)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Suspicious character range that is equivalent to \\[A-Z\\\\[\\\\\\\\]^_`a-z\\]."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/static/swagger-ui/swagger-ui-bundle.js",
        "start_line": 5333,
        "end_line": 5333,
        "start_column": 23,
        "end_column": 26
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/130/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 129,
    "created_at": "2025-04-30T09:10:12Z",
    "updated_at": "2025-04-30T09:10:12Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/129",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/129",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/overly-large-range",
      "severity": "warning",
      "description": "Overly permissive regular expression range",
      "name": "js/overly-large-range",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.",
      "help": "# Overly permissive regular expression range\nIt's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \\ ] ^ _ ` ``.\n\nAnother common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.\n\n\n## Recommendation\nAvoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.\n\n\n## Example\nThe following example code is intended to check whether a string is a valid 6 digit hex color.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9a-fA-f]{6}$/i.test(color);\n}\n\n```\nHowever, the `A-f` range is overly large and matches every uppercase character. It would parse a \"color\" like `#XXYYZZ` as valid.\n\nThe fix is to use an uppercase `A-F` range instead.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9A-F]{6}$/i.test(color);\n}\n\n```\n\n## References\n* GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)\n* wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)\n* Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)\n* Paul Boyd: [The regex \\[,-.\\]](https://pboyd.io/posts/comma-dash-dot/)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Suspicious character range that is equivalent to \\[A-Z\\\\[\\\\\\\\]^_`a-z\\]."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/static/swagger-ui/swagger-ui-bundle.js",
        "start_line": 5186,
        "end_line": 5186,
        "start_column": 25,
        "end_column": 28
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/129/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 128,
    "created_at": "2025-04-30T09:10:12Z",
    "updated_at": "2025-04-30T09:10:12Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/128",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/128",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/bad-tag-filter",
      "severity": "warning",
      "description": "Bad HTML filtering regexp",
      "name": "js/bad-tag-filter",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "external/cwe/cwe-080",
        "external/cwe/cwe-116",
        "external/cwe/cwe-184",
        "external/cwe/cwe-185",
        "external/cwe/cwe-186",
        "security"
      ],
      "full_description": "Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.",
      "help": "# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```javascript\nfunction filterScript(html) {\n    var scriptRegex = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\n    var match;\n    while ((match = scriptRegex.exec(html)) !== null) {\n        html = html.replace(match[0], match[1]);\n    }\n    return html;\n}\n\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression only parses --> and not --!> as a HTML comment end tag."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/static/swagger-ui/swagger-ui-bundle.js",
        "start_line": 5591,
        "end_line": 5591,
        "start_column": 28,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/128/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 127,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/127",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/127",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/polynomial-redos",
      "severity": "warning",
      "description": "Polynomial regular expression used on uncontrolled data",
      "name": "py/polynomial-redos",
      "tags": [
        "external/cwe/cwe-1333",
        "external/cwe/cwe-400",
        "external/cwe/cwe-730",
        "security"
      ],
      "full_description": "A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks.",
      "help": "# Polynomial regular expression used on uncontrolled data\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engine provided by Python uses a backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this use of a regular expression, which removes all leading and trailing whitespace in a string:\n\n```python\n\nre.sub(r\"^\\s+|\\s+$\", \"\", text) # BAD\n```\nThe sub-expression `\"\\s+$\"` will match the whitespace characters in `text` from left to right, but it can start matching anywhere within a whitespace sequence. This is problematic for strings that do **not** end with a whitespace character. Such a string will force the regular expression engine to process each whitespace sequence once per whitespace character in the sequence.\n\nThis ultimately means that the time cost of trimming a string is quadratic in the length of the string. So a string like `\"a b\"` will take milliseconds to process, but a similar string with a million spaces instead of just one will take several minutes.\n\nAvoid this problem by rewriting the regular expression to not contain the ambiguity about when to start matching whitespace sequences. For instance, by using a negative look-behind (`^\\s+|(?<!\\s)\\s+$`), or just by using the built-in strip method (`text.strip()`).\n\nNote that the sub-expression `\"^\\s+\"` is **not** problematic as the `^` anchor restricts when that sub-expression can start matching, and as the regular expression engine matches from left to right.\n\n\n## Example\nAs a similar, but slightly subtler problem, consider the regular expression that matches lines with numbers, possibly written using scientific notation:\n\n```python\n\n^0\\.\\d+E?\\d+$ # BAD\n```\nThe problem with this regular expression is in the sub-expression `\\d+E?\\d+` because the second `\\d+` can start matching digits anywhere after the first match of the first `\\d+` if there is no `E` in the input string.\n\nThis is problematic for strings that do **not** end with a digit. Such a string will force the regular expression engine to process each digit sequence once per digit in the sequence, again leading to a quadratic time complexity.\n\nTo make the processing faster, the regular expression should be rewritten such that the two `\\d+` sub-expressions do not have overlapping matches: `^0\\.\\d+(E\\d+)?$`.\n\n\n## Example\nSometimes it is unclear how a regular expression can be rewritten to avoid the problem. In such cases, it often suffices to limit the length of the input string. For instance, the following regular expression is used to match numbers, and on some non-number inputs it can have quadratic time complexity:\n\n```python\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\nIt is not immediately obvious how to rewrite this regular expression to avoid the problem. However, you can mitigate performance issues by limiting the length to 1000 characters, which will always finish in a reasonable amount of time.\n\n```python\n\nif len(str) > 1000:\n    raise ValueError(\"Input too long\")\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression that depends on a user-provided value may run slow on strings starting with '<details type=\"reasoning\"' and with many repetitions of '<details type=\"reasoning\"'.\nThis regular expression that depends on a user-provided value may run slow on strings starting with '<details type=\"reasoning\">' and with many repetitions of '<details type=\"reasoning\">'."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/tasks.py",
        "start_line": 210,
        "end_line": 210,
        "start_column": 13,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/127/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 126,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/126",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/126",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/polynomial-redos",
      "severity": "warning",
      "description": "Polynomial regular expression used on uncontrolled data",
      "name": "py/polynomial-redos",
      "tags": [
        "external/cwe/cwe-1333",
        "external/cwe/cwe-400",
        "external/cwe/cwe-730",
        "security"
      ],
      "full_description": "A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks.",
      "help": "# Polynomial regular expression used on uncontrolled data\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engine provided by Python uses a backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this use of a regular expression, which removes all leading and trailing whitespace in a string:\n\n```python\n\nre.sub(r\"^\\s+|\\s+$\", \"\", text) # BAD\n```\nThe sub-expression `\"\\s+$\"` will match the whitespace characters in `text` from left to right, but it can start matching anywhere within a whitespace sequence. This is problematic for strings that do **not** end with a whitespace character. Such a string will force the regular expression engine to process each whitespace sequence once per whitespace character in the sequence.\n\nThis ultimately means that the time cost of trimming a string is quadratic in the length of the string. So a string like `\"a b\"` will take milliseconds to process, but a similar string with a million spaces instead of just one will take several minutes.\n\nAvoid this problem by rewriting the regular expression to not contain the ambiguity about when to start matching whitespace sequences. For instance, by using a negative look-behind (`^\\s+|(?<!\\s)\\s+$`), or just by using the built-in strip method (`text.strip()`).\n\nNote that the sub-expression `\"^\\s+\"` is **not** problematic as the `^` anchor restricts when that sub-expression can start matching, and as the regular expression engine matches from left to right.\n\n\n## Example\nAs a similar, but slightly subtler problem, consider the regular expression that matches lines with numbers, possibly written using scientific notation:\n\n```python\n\n^0\\.\\d+E?\\d+$ # BAD\n```\nThe problem with this regular expression is in the sub-expression `\\d+E?\\d+` because the second `\\d+` can start matching digits anywhere after the first match of the first `\\d+` if there is no `E` in the input string.\n\nThis is problematic for strings that do **not** end with a digit. Such a string will force the regular expression engine to process each digit sequence once per digit in the sequence, again leading to a quadratic time complexity.\n\nTo make the processing faster, the regular expression should be rewritten such that the two `\\d+` sub-expressions do not have overlapping matches: `^0\\.\\d+(E\\d+)?$`.\n\n\n## Example\nSometimes it is unclear how a regular expression can be rewritten to avoid the problem. In such cases, it often suffices to limit the length of the input string. For instance, the following regular expression is used to match numbers, and on some non-number inputs it can have quadratic time complexity:\n\n```python\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\nIt is not immediately obvious how to rewrite this regular expression to avoid the problem. However, you can mitigate performance issues by limiting the length to 1000 characters, which will always finish in a reasonable amount of time.\n\n```python\n\nif len(str) > 1000:\n    raise ValueError(\"Input too long\")\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression that depends on a user-provided value may run slow on strings starting with '_:' and with many repetitions of ' '.\nThis regular expression that depends on a user-provided value may run slow on strings starting with '_:' and with many repetitions of ' '.\nThis regular expression that depends on a user-provided value may run slow on strings starting with '_:' and with many repetitions of ' '.\nThis regular expression that depends on a user-provided value may run slow on strings starting with '_:' and with many repetitions of ' '."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/utils/plugin.py",
        "start_line": 42,
        "end_line": 42,
        "start_column": 51,
        "end_column": 55
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/126/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 125,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/125",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/125",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/polynomial-redos",
      "severity": "warning",
      "description": "Polynomial regular expression used on uncontrolled data",
      "name": "py/polynomial-redos",
      "tags": [
        "external/cwe/cwe-1333",
        "external/cwe/cwe-400",
        "external/cwe/cwe-730",
        "security"
      ],
      "full_description": "A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks.",
      "help": "# Polynomial regular expression used on uncontrolled data\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engine provided by Python uses a backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this use of a regular expression, which removes all leading and trailing whitespace in a string:\n\n```python\n\nre.sub(r\"^\\s+|\\s+$\", \"\", text) # BAD\n```\nThe sub-expression `\"\\s+$\"` will match the whitespace characters in `text` from left to right, but it can start matching anywhere within a whitespace sequence. This is problematic for strings that do **not** end with a whitespace character. Such a string will force the regular expression engine to process each whitespace sequence once per whitespace character in the sequence.\n\nThis ultimately means that the time cost of trimming a string is quadratic in the length of the string. So a string like `\"a b\"` will take milliseconds to process, but a similar string with a million spaces instead of just one will take several minutes.\n\nAvoid this problem by rewriting the regular expression to not contain the ambiguity about when to start matching whitespace sequences. For instance, by using a negative look-behind (`^\\s+|(?<!\\s)\\s+$`), or just by using the built-in strip method (`text.strip()`).\n\nNote that the sub-expression `\"^\\s+\"` is **not** problematic as the `^` anchor restricts when that sub-expression can start matching, and as the regular expression engine matches from left to right.\n\n\n## Example\nAs a similar, but slightly subtler problem, consider the regular expression that matches lines with numbers, possibly written using scientific notation:\n\n```python\n\n^0\\.\\d+E?\\d+$ # BAD\n```\nThe problem with this regular expression is in the sub-expression `\\d+E?\\d+` because the second `\\d+` can start matching digits anywhere after the first match of the first `\\d+` if there is no `E` in the input string.\n\nThis is problematic for strings that do **not** end with a digit. Such a string will force the regular expression engine to process each digit sequence once per digit in the sequence, again leading to a quadratic time complexity.\n\nTo make the processing faster, the regular expression should be rewritten such that the two `\\d+` sub-expressions do not have overlapping matches: `^0\\.\\d+(E\\d+)?$`.\n\n\n## Example\nSometimes it is unclear how a regular expression can be rewritten to avoid the problem. In such cases, it often suffices to limit the length of the input string. For instance, the following regular expression is used to match numbers, and on some non-number inputs it can have quadratic time complexity:\n\n```python\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\nIt is not immediately obvious how to rewrite this regular expression to avoid the problem. However, you can mitigate performance issues by limiting the length to 1000 characters, which will always finish in a reasonable amount of time.\n\n```python\n\nif len(str) > 1000:\n    raise ValueError(\"Input too long\")\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression that depends on a user-provided value may run slow on strings with many repetitions of '0'."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/utils/middleware.py",
        "start_line": 1374,
        "end_line": 1374,
        "start_column": 68,
        "end_column": 79
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/125/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 124,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/124",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/124",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/polynomial-redos",
      "severity": "warning",
      "description": "Polynomial regular expression used on uncontrolled data",
      "name": "py/polynomial-redos",
      "tags": [
        "external/cwe/cwe-1333",
        "external/cwe/cwe-400",
        "external/cwe/cwe-730",
        "security"
      ],
      "full_description": "A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks.",
      "help": "# Polynomial regular expression used on uncontrolled data\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engine provided by Python uses a backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this use of a regular expression, which removes all leading and trailing whitespace in a string:\n\n```python\n\nre.sub(r\"^\\s+|\\s+$\", \"\", text) # BAD\n```\nThe sub-expression `\"\\s+$\"` will match the whitespace characters in `text` from left to right, but it can start matching anywhere within a whitespace sequence. This is problematic for strings that do **not** end with a whitespace character. Such a string will force the regular expression engine to process each whitespace sequence once per whitespace character in the sequence.\n\nThis ultimately means that the time cost of trimming a string is quadratic in the length of the string. So a string like `\"a b\"` will take milliseconds to process, but a similar string with a million spaces instead of just one will take several minutes.\n\nAvoid this problem by rewriting the regular expression to not contain the ambiguity about when to start matching whitespace sequences. For instance, by using a negative look-behind (`^\\s+|(?<!\\s)\\s+$`), or just by using the built-in strip method (`text.strip()`).\n\nNote that the sub-expression `\"^\\s+\"` is **not** problematic as the `^` anchor restricts when that sub-expression can start matching, and as the regular expression engine matches from left to right.\n\n\n## Example\nAs a similar, but slightly subtler problem, consider the regular expression that matches lines with numbers, possibly written using scientific notation:\n\n```python\n\n^0\\.\\d+E?\\d+$ # BAD\n```\nThe problem with this regular expression is in the sub-expression `\\d+E?\\d+` because the second `\\d+` can start matching digits anywhere after the first match of the first `\\d+` if there is no `E` in the input string.\n\nThis is problematic for strings that do **not** end with a digit. Such a string will force the regular expression engine to process each digit sequence once per digit in the sequence, again leading to a quadratic time complexity.\n\nTo make the processing faster, the regular expression should be rewritten such that the two `\\d+` sub-expressions do not have overlapping matches: `^0\\.\\d+(E\\d+)?$`.\n\n\n## Example\nSometimes it is unclear how a regular expression can be rewritten to avoid the problem. In such cases, it often suffices to limit the length of the input string. For instance, the following regular expression is used to match numbers, and on some non-number inputs it can have quadratic time complexity:\n\n```python\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\nIt is not immediately obvious how to rewrite this regular expression to avoid the problem. However, you can mitigate performance issues by limiting the length to 1000 characters, which will always finish in a reasonable amount of time.\n\n```python\n\nif len(str) > 1000:\n    raise ValueError(\"Input too long\")\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression that depends on a user-provided value may run slow on strings with many repetitions of '?'.\nThis regular expression that depends on a user-provided value may run slow on strings with many repetitions of '?'."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/utils/misc.py",
        "start_line": 284,
        "end_line": 284,
        "start_column": 49,
        "end_column": 54
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/124/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 123,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/123",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/123",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/insecure-protocol",
      "severity": "warning",
      "description": "Use of insecure SSL/TLS version",
      "name": "py/insecure-protocol",
      "tags": [
        "external/cwe/cwe-327",
        "security"
      ],
      "full_description": "Using an insecure SSL/TLS version may leave the connection vulnerable to attacks.",
      "help": "# Use of insecure SSL/TLS version\nUsing a broken or weak cryptographic protocol may make a connection vulnerable to interference from an attacker.\n\n\n## Recommendation\nEnsure that a modern, strong protocol is used. All versions of SSL, and TLS versions 1.0 and 1.1 are known to be vulnerable to attacks. Using TLS 1.2 or above is strongly recommended.\n\n\n## Example\nThe following code shows a variety of ways of setting up a connection using SSL or TLS. They are all insecure because of the version specified.\n\n\n```python\nimport ssl\nimport socket\n\n# Using the deprecated ssl.wrap_socket method\nssl.wrap_socket(socket.socket(), ssl_version=ssl.PROTOCOL_SSLv2)\n\n# Using SSLContext\ncontext = ssl.SSLContext(ssl_version=ssl.PROTOCOL_SSLv3)\n\n# Using pyOpenSSL\n\nfrom pyOpenSSL import SSL\n\ncontext = SSL.Context(SSL.TLSv1_METHOD)\n\n\n\n```\nAll cases should be updated to use a secure protocol, such as `PROTOCOL_TLSv1_2`.\n\nNote that `ssl.wrap_socket` has been deprecated in Python 3.7. The recommended alternatives are:\n\n* `ssl.SSLContext` - supported in Python 2.7.9, 3.2, and later versions\n* `ssl.create_default_context` - a convenience function, supported in Python 3.4 and later versions.\nEven when you use these alternatives, you should ensure that a safe protocol is used. The following code illustrates how to use flags (available since Python 3.2) or the \\`minimum_version\\` field (favored since Python 3.7) to restrict the protocols accepted when creating a connection.\n\n\n```python\nimport ssl\n\n# Using flags to restrict the protocol\ncontext = ssl.SSLContext()\ncontext.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1\n\n# Declaring a minimum version to restrict the protocol\ncontext = ssl.create_default_context()\ncontext.minimum_version = ssl.TLSVersion.TLSv1_2\n\n```\n\n## References\n* Wikipedia: [ Transport Layer Security](https://en.wikipedia.org/wiki/Transport_Layer_Security).\n* Python 3 documentation: [ class ssl.SSLContext](https://docs.python.org/3/library/ssl.html#ssl.SSLContext).\n* Python 3 documentation: [ ssl.wrap_socket](https://docs.python.org/3/library/ssl.html#ssl.wrap_socket).\n* Python 3 documentation: [ notes on context creation](https://docs.python.org/3/library/ssl.html#functions-constants-and-exceptions).\n* Python 3 documentation: [ notes on security considerations](https://docs.python.org/3/library/ssl.html#ssl-security).\n* pyOpenSSL documentation: [ An interface to the SSL-specific parts of OpenSSL](https://pyopenssl.org/en/stable/api/ssl.html).\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Insecure SSL/TLS protocol version TLSv1 allowed by call to ssl.create_default_context.\nInsecure SSL/TLS protocol version TLSv1_1 allowed by call to ssl.create_default_context."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/retrieval/web/utils.py",
        "start_line": 110,
        "end_line": 110,
        "start_column": 14,
        "end_column": 21
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/123/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 122,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/122",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/122",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/models/auths.py",
        "start_line": 159,
        "end_line": 159,
        "start_column": 18,
        "end_column": 65
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/122/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 121,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/121",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/121",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value.\nThis path depends on a user-provided value.\nThis path depends on a user-provided value.\nThis path depends on a user-provided value."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/retrieval/utils.py",
        "start_line": 593,
        "end_line": 593,
        "start_column": 24,
        "end_column": 29
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/121/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 120,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/120",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/120",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/full-ssrf",
      "severity": "error",
      "description": "Full server-side request forgery",
      "name": "py/full-ssrf",
      "tags": [
        "external/cwe/cwe-918",
        "security"
      ],
      "full_description": "Making a network request to a URL that is fully user-controlled allows for request forgery attacks.",
      "help": "# Full server-side request forgery\nDirectly incorporating user input into an HTTP request without validating the input can facilitate server-side request forgery (SSRF) attacks. In these attacks, the request may be changed, directed at a different server, or via a different protocol. This can allow the attacker to obtain sensitive information or perform actions with escalated privilege.\n\nWe make a distinctions between how much of the URL an attacker can control:\n\n* **Full SSRF**: where the full URL can be controlled.\n* **Partial SSRF**: where only part of the URL can be controlled, such as the path component of a URL to a hardcoded domain.\n\n\nPartial control of a URL is often much harder to exploit. Therefore we have created a separate query for each of these.\n\nThis query covers full SSRF, to find partial SSRF use the `py/partial-ssrf` query.\n\n\n## Recommendation\nTo guard against SSRF attacks you should avoid putting user-provided input directly into a request URL. On the application level, maintain a list of authorized URLs on the server and choose from that list based on the input provided. If that is not possible, one should verify the IP address for all user-controlled requests to ensure they are not private. This requires saving the verified IP address of each domain, then utilizing a custom HTTP adapter to ensure that future requests to that domain use the verified IP address. On the network level, you can segment the vulnerable application into its own LAN or block access to specific devices.\n\n\n## Example\nThe following example shows code vulnerable to a full SSRF attack, because it uses untrusted input (HTTP request parameter) directly to construct a URL. By using `evil.com#` as the `target` value, the requested URL will be `https://evil.com#.example.com/data/`. It also shows how to remedy the problem by using the user input select a known fixed string.\n\n\n```python\nimport requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/full_ssrf\")\ndef full_ssrf():\n    target = request.args[\"target\"]\n\n    # BAD: user has full control of URL\n    resp = requests.get(\"https://\" + target + \".example.com/data/\")\n\n    # GOOD: `subdomain` is controlled by the server.\n    subdomain = \"europe\" if target == \"EU\" else \"world\"\n    resp = requests.get(\"https://\" + subdomain + \".example.com/data/\")\n\n```\n\n## Example\nThe following example shows code vulnerable to a partial SSRF attack, because it uses untrusted input (HTTP request parameter) directly to construct a URL. By using `../transfer-funds-to/123?amount=456` as the `user_id` value, the requested URL will be `https://api.example.com/transfer-funds-to/123?amount=456`. It also shows how to remedy the problem by validating the input.\n\n\n```python\nimport requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/partial_ssrf\")\ndef partial_ssrf():\n    user_id = request.args[\"user_id\"]\n\n    # BAD: user can fully control the path component of the URL\n    resp = requests.get(\"https://api.example.com/user_info/\" + user_id)\n\n    if user_id.isalnum():\n        # GOOD: user_id is restricted to be alpha-numeric, and cannot alter path component of URL\n        resp = requests.get(\"https://api.example.com/user_info/\" + user_id)\n\n```\n\n## References\n* [OWASP SSRF article](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n* [PortSwigger SSRF article](https://portswigger.net/web-security/ssrf)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The full URL of this request depends on a user-provided value.\nThe full URL of this request depends on a user-provided value."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/ollama.py",
        "start_line": 1513,
        "end_line": 1513,
        "start_column": 20,
        "end_column": 58
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/120/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 118,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/118",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/118",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/url-redirection",
      "severity": "error",
      "description": "URL redirection from remote source",
      "name": "py/url-redirection",
      "tags": [
        "external/cwe/cwe-601",
        "security"
      ],
      "full_description": "URL redirection based on unvalidated user input may cause redirection to malicious web sites.",
      "help": "# URL redirection from remote source\nDirectly incorporating user input into a URL redirect request without validating the input can facilitate phishing attacks. In these attacks, unsuspecting users can be redirected to a malicious site that looks very similar to the real site they intend to visit, but which is controlled by the attacker.\n\n\n## Recommendation\nTo guard against untrusted URL redirection, it is advisable to avoid putting user input directly into a redirect URL. Instead, maintain a list of authorized redirects on the server; then choose from that list based on the user input provided.\n\nIf this is not possible, then the user input should be validated in some other way, for example, by verifying that the target URL does not include an explicit host name.\n\n\n## Example\nThe following example shows an HTTP request parameter being used directly in a URL redirect without validating the input, which facilitates phishing attacks:\n\n\n```python\nfrom flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    return redirect(target, code=302)\n\n```\nIf you know the set of valid redirect targets, you can maintain a list of them on the server and check that the user input is in that list:\n\n\n```python\nfrom flask import Flask, request, redirect\n\nVALID_REDIRECT = \"http://cwe.mitre.org/data/definitions/601.html\"\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    if target == VALID_REDIRECT:\n        return redirect(target, code=302)\n    else:\n        # ignore the target and redirect to the home page\n        return redirect('/', code=302)\n\n```\nOften this is not possible, so an alternative is to check that the target URL does not specify an explicit host name. For example, you can use the `urlparse` function from the Python standard library to parse the URL and check that the `netloc` attribute is empty.\n\nNote, however, that some cases are not handled as we desire out-of-the-box by `urlparse`, so we need to adjust two things, as shown in the example below:\n\n* Many browsers accept backslash characters (`\\`) as equivalent to forward slash characters (`/`) in URLs, but the `urlparse` function does not.\n* Mistyped URLs such as `https:/example.com` or `https:///example.com` are parsed as having an empty `netloc` attribute, while browsers will still redirect to the correct site.\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    target = target.replace('\\\\', '')\n    if not urlparse(target).netloc and not urlparse(target).scheme:\n        # relative path, safe to redirect\n        return redirect(target, code=302)\n    # ignore the target and redirect to the home page\n    return redirect('/', code=302)\n\n```\nFor Django application, you can use the function `url_has_allowed_host_and_scheme` to check that a URL is safe to redirect to, as shown in the following example:\n\n\n```python\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import url_has_allowed_host_and_scheme\nfrom django.views import View\n\nclass RedirectView(View):\n    def get(self, request, *args, **kwargs):\n        target = request.GET.get('target', '')\n        if url_has_allowed_host_and_scheme(target, allowed_hosts=None):\n            return HttpResponseRedirect(target)\n        else:\n            # ignore the target and redirect to the home page\n            return redirect('/')\n```\nNote that `url_has_allowed_host_and_scheme` handles backslashes correctly, so no additional processing is required.\n\n\n## References\n* OWASP: [ XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Python standard library: [ urllib.parse](https://docs.python.org/3/library/urllib.parse.html).\n* Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Untrusted URL redirection depends on a user-provided value."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/auths.py",
        "start_line": 586,
        "end_line": 586,
        "start_column": 41,
        "end_column": 87
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/118/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 117,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/117",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/117",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/overly-large-range",
      "severity": "warning",
      "description": "Overly permissive regular expression range",
      "name": "py/overly-large-range",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.",
      "help": "# Overly permissive regular expression range\nIt's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \\ ] ^ _ ` ``.\n\nAnother common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.\n\n\n## Recommendation\nAvoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.\n\n\n## Example\nThe following example code is intended to check whether a string is a valid 6 digit hex color.\n\n```python\n\nimport re\ndef is_valid_hex_color(color):\n    return re.match(r'^#[0-9a-fA-f]{6}$', color) is not None\n\n```\nHowever, the `A-f` range is overly large and matches every uppercase character. It would parse a \"color\" like `#XXYYZZ` as valid.\n\nThe fix is to use an uppercase `A-F` range instead.\n\n```python\n\nimport re\ndef is_valid_hex_color(color):\n    return re.match(r'^#[0-9a-fA-F]{6}$', color) is not None\n\n```\n\n## References\n* GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)\n* wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)\n* Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)\n* Paul Boyd: [The regex \\[,-.\\]](https://pboyd.io/posts/comma-dash-dot/)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Suspicious character range that overlaps with 0-9 in the same character class, and is equivalent to \\[.\\/0-9:;<=\\]."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/utils/plugin.py",
        "start_line": 202,
        "end_line": 202,
        "start_column": 58,
        "end_column": 61
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/117/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 116,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/116",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/116",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string webhook.office.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/utils/webhook.py",
        "start_line": 28,
        "end_line": 28,
        "start_column": 14,
        "end_column": 41
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/116/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 115,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/115",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/115",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string https://chat.googleapis.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/utils/webhook.py",
        "start_line": 18,
        "end_line": 18,
        "start_column": 48,
        "end_column": 84
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/115/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 114,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/114",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/114",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string https://hooks.slack.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/utils/webhook.py",
        "start_line": 18,
        "end_line": 18,
        "start_column": 12,
        "end_column": 44
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/114/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 113,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/113",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/113",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string api.openai.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/openai.py",
        "start_line": 524,
        "end_line": 524,
        "start_column": 24,
        "end_column": 47
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/113/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 112,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/112",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/112",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string https://api.openai.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/audio.py",
        "start_line": 899,
        "end_line": 901,
        "start_column": 16,
        "end_column": 10
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/112/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 111,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/111",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/111",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string https://api.openai.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/audio.py",
        "start_line": 853,
        "end_line": 855,
        "start_column": 16,
        "end_column": 10
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/111/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 110,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/110",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/110",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/insecure-cookie",
      "severity": "warning",
      "description": "Failure to use secure cookies",
      "name": "py/insecure-cookie",
      "tags": [
        "external/cwe/cwe-1004",
        "external/cwe/cwe-1275",
        "external/cwe/cwe-614",
        "security"
      ],
      "full_description": "Insecure cookies may be sent in cleartext, which makes them vulnerable to interception.",
      "help": "# Failure to use secure cookies\nCookies without the `Secure` flag set may be transmitted using HTTP instead of HTTPS, which leaves them vulnerable to reading by a third party.\n\nCookies without the `HttpOnly` flag set are accessible to JavaScript running in the same origin. In case of a Cross-Site Scripting (XSS) vulnerability, the cookie can be stolen by a malicious script.\n\nCookies with the `SameSite` attribute set to `'None'` will be sent with cross-origin requests, which can be controlled by third-party JavaScript code and allow for Cross-Site Request Forgery (CSRF) attacks.\n\n\n## Recommendation\nAlways set `secure` to `True` or add \"; Secure;\" to the cookie's raw value.\n\nAlways set `httponly` to `True` or add \"; HttpOnly;\" to the cookie's raw value.\n\nAlways set `samesite` to `Lax` or `Strict`, or add \"; SameSite=Lax;\", or \"; Samesite=Strict;\" to the cookie's raw header value.\n\n\n## Example\nIn the following examples, the cases marked GOOD show secure cookie attributes being set; whereas in the cases marked BAD they are not set.\n\n\n```python\nfrom flask import Flask, request, make_response, Response\n\n\n@app.route(\"/good1\")\ndef good1():\n    resp = make_response()\n    resp.set_cookie(\"name\", value=\"value\", secure=True, httponly=True, samesite='Strict') # GOOD: Attributes are securely set\n    return resp\n\n\n@app.route(\"/good2\")\ndef good2():\n    resp = make_response()\n    resp.headers['Set-Cookie'] = \"name=value; Secure; HttpOnly; SameSite=Strict\" # GOOD: Attributes are securely set \n    return resp\n\n@app.route(\"/bad1\")\n    resp = make_response()\n    resp.set_cookie(\"name\", value=\"value\", samesite='None') # BAD: the SameSite attribute is set to 'None' and the 'Secure' and 'HttpOnly' attributes are set to False by default.\n    return resp\n```\n\n## References\n* Detectify: [Cookie lack Secure flag](https://support.detectify.com/support/solutions/articles/48001048982-cookie-lack-secure-flag).\n* PortSwigger: [TLS cookie without secure flag set](https://portswigger.net/kb/issues/00500200_tls-cookie-without-secure-flag-set).\n* Common Weakness Enumeration: [CWE-614](https://cwe.mitre.org/data/definitions/614.html).\n* Common Weakness Enumeration: [CWE-1004](https://cwe.mitre.org/data/definitions/1004.html).\n* Common Weakness Enumeration: [CWE-1275](https://cwe.mitre.org/data/definitions/1275.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Cookie is added without the Secure attribute properly set."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/auths.py",
        "start_line": 323,
        "end_line": 327,
        "start_column": 17,
        "end_column": 18
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/110/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 109,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/109",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/109",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/tasks.py",
        "start_line": 701,
        "end_line": 701,
        "start_column": 21,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/109/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 108,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/108",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/108",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/tasks.py",
        "start_line": 697,
        "end_line": 697,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/108/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 107,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/107",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/107",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/tasks.py",
        "start_line": 646,
        "end_line": 646,
        "start_column": 21,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/107/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 106,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/106",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/106",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/tasks.py",
        "start_line": 642,
        "end_line": 642,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/106/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 105,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/105",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/105",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/tasks.py",
        "start_line": 566,
        "end_line": 566,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/105/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 104,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/104",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/104",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/tasks.py",
        "start_line": 483,
        "end_line": 483,
        "start_column": 21,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/104/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 103,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/103",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/103",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/tasks.py",
        "start_line": 479,
        "end_line": 479,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/103/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 102,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/102",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/102",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/tasks.py",
        "start_line": 396,
        "end_line": 396,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/102/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 101,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/101",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/101",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/tasks.py",
        "start_line": 324,
        "end_line": 324,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/101/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 100,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/100",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/100",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/tasks.py",
        "start_line": 249,
        "end_line": 249,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/100/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 99,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/99",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/99",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/routers/ollama.py",
        "start_line": 1684,
        "end_line": 1684,
        "start_column": 30,
        "end_column": 51
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/99/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 98,
    "created_at": "2025-04-30T09:10:00Z",
    "updated_at": "2025-04-30T09:10:00Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/98",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/98",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user.\nStack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "temp-openwebui/backend/open_webui/main.py",
        "start_line": 1164,
        "end_line": 1166,
        "start_column": 16,
        "end_column": 10
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/98/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 96,
    "created_at": "2025-04-28T17:08:09Z",
    "updated_at": "2025-04-28T17:08:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/96",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/96",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/bad-tag-filter",
      "severity": "warning",
      "description": "Bad HTML filtering regexp",
      "name": "py/bad-tag-filter",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "external/cwe/cwe-116",
        "external/cwe/cwe-185",
        "external/cwe/cwe-186",
        "security"
      ],
      "full_description": "Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.",
      "help": "# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```python\nimport re\n\ndef filterScriptTags(content): \n    oldContent = \"\"\n    while oldContent != content:\n        oldContent = content\n        content = re.sub(r'<script.*?>.*?</script>', '', content, flags= re.DOTALL | re.IGNORECASE)\n    return content\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression does not match script end tags like </script >."
      },
      "location": {
        "path": "scripts/add_sri_hashes.py",
        "start_line": 51,
        "end_line": 51,
        "start_column": 35,
        "end_column": 75
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/96/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 95,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/95",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/95",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "security/secrets/secrets_manager.py",
        "start_line": 645,
        "end_line": 645,
        "start_column": 30,
        "end_column": 71
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/95/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 94,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/94",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/94",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "security/secrets/secrets_manager.py",
        "start_line": 628,
        "end_line": 628,
        "start_column": 22,
        "end_column": 64
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/94/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 93,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/93",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/93",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "security/secrets/secrets_manager.py",
        "start_line": 386,
        "end_line": 386,
        "start_column": 21,
        "end_column": 86
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/93/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 92,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/92",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/92",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "security/secrets/secrets_manager.py",
        "start_line": 100,
        "end_line": 100,
        "start_column": 21,
        "end_column": 86
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/92/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 91,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/91",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/91",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "security/secrets/rotation.py",
        "start_line": 145,
        "end_line": 145,
        "start_column": 30,
        "end_column": 72
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/91/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 90,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/90",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/90",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "security/secrets/rotation.py",
        "start_line": 141,
        "end_line": 141,
        "start_column": 29,
        "end_column": 54
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/90/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 89,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/89",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/89",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "security/secrets/rotation.py",
        "start_line": 139,
        "end_line": 139,
        "start_column": 38,
        "end_column": 94
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/89/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 88,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/88",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/88",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "security/secrets/rotation.py",
        "start_line": 127,
        "end_line": 127,
        "start_column": 34,
        "end_column": 79
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/88/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 87,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/87",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/87",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "security/secrets/rotation.py",
        "start_line": 104,
        "end_line": 104,
        "start_column": 32,
        "end_column": 77
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/87/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 86,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/86",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/86",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "security/secrets/config.py",
        "start_line": 169,
        "end_line": 169,
        "start_column": 21,
        "end_column": 75
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/86/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 85,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/85",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/85",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "security/secrets/config.py",
        "start_line": 58,
        "end_line": 58,
        "start_column": 25,
        "end_column": 91
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/85/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 84,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/84",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/84",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "security/testing/security_scanner.py",
        "start_line": 798,
        "end_line": 798,
        "start_column": 23,
        "end_column": 32
      },
      "classifications": [
        "test"
      ]
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/84/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 83,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/83",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/83",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "security/testing/security_scanner.py",
        "start_line": 782,
        "end_line": 782,
        "start_column": 19,
        "end_column": 28
      },
      "classifications": [
        "test"
      ]
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/83/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 82,
    "created_at": "2025-04-27T15:38:07Z",
    "updated_at": "2025-04-27T15:38:07Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/82",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/82",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value."
      },
      "location": {
        "path": "security/testing/api.py",
        "start_line": 103,
        "end_line": 103,
        "start_column": 31,
        "end_column": 50
      },
      "classifications": [
        "test"
      ]
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/82/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 81,
    "created_at": "2025-04-26T05:53:22Z",
    "updated_at": "2025-04-26T05:53:22Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/81",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/81",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/overly-large-range",
      "severity": "warning",
      "description": "Overly permissive regular expression range",
      "name": "py/overly-large-range",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.",
      "help": "# Overly permissive regular expression range\nIt's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \\ ] ^ _ ` ``.\n\nAnother common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.\n\n\n## Recommendation\nAvoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.\n\n\n## Example\nThe following example code is intended to check whether a string is a valid 6 digit hex color.\n\n```python\n\nimport re\ndef is_valid_hex_color(color):\n    return re.match(r'^#[0-9a-fA-f]{6}$', color) is not None\n\n```\nHowever, the `A-f` range is overly large and matches every uppercase character. It would parse a \"color\" like `#XXYYZZ` as valid.\n\nThe fix is to use an uppercase `A-F` range instead.\n\n```python\n\nimport re\ndef is_valid_hex_color(color):\n    return re.match(r'^#[0-9a-fA-F]{6}$', color) is not None\n\n```\n\n## References\n* GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)\n* wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)\n* Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)\n* Paul Boyd: [The regex \\[,-.\\]](https://pboyd.io/posts/comma-dash-dot/)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Suspicious character range that overlaps with 0-9 in the same character class, and is equivalent to \\[.\\/0-9:;<=\\]."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/utils/plugin.py",
        "start_line": 202,
        "end_line": 202,
        "start_column": 58,
        "end_column": 61
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/81/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 78,
    "created_at": "2025-04-25T15:02:55Z",
    "updated_at": "2025-04-25T15:02:55Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/78",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/78",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/redos",
      "severity": "error",
      "description": "Inefficient regular expression",
      "name": "py/redos",
      "tags": [
        "external/cwe/cwe-1333",
        "external/cwe/cwe-400",
        "external/cwe/cwe-730",
        "security"
      ],
      "full_description": "A regular expression that requires exponential time to match certain inputs can be a performance bottleneck, and may be vulnerable to denial-of-service attacks.",
      "help": "# Inefficient regular expression\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engine provided by Python uses a backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this regular expression:\n\n```python\n\n^_(__|.)+_$\n```\nIts sub-expression `\"(__|.)+?\"` can match the string `\"__\"` either by the first alternative `\"__\"` to the left of the `\"|\"` operator, or by two repetitions of the second alternative `\".\"` to the right. Thus, a string consisting of an odd number of underscores followed by some other character will cause the regular expression engine to run for an exponential amount of time before rejecting the input.\n\nThis problem can be avoided by rewriting the regular expression to remove the ambiguity between the two branches of the alternative inside the repetition:\n\n```python\n\n^_(__|[^_])+_$\n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This part of the regular expression may cause exponential backtracking on strings starting with '<A A=' and containing many repetitions of '  A='."
      },
      "location": {
        "path": "security/validation/html_validation.py",
        "start_line": 46,
        "end_line": 46,
        "start_column": 87,
        "end_column": 90
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/78/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 77,
    "created_at": "2025-04-25T15:02:55Z",
    "updated_at": "2025-04-25T15:02:55Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/77",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/77",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/bad-tag-filter",
      "severity": "warning",
      "description": "Bad HTML filtering regexp",
      "name": "py/bad-tag-filter",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "external/cwe/cwe-116",
        "external/cwe/cwe-185",
        "external/cwe/cwe-186",
        "security"
      ],
      "full_description": "Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.",
      "help": "# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```python\nimport re\n\ndef filterScriptTags(content): \n    oldContent = \"\"\n    while oldContent != content:\n        oldContent = content\n        content = re.sub(r'<script.*?>.*?</script>', '', content, flags= re.DOTALL | re.IGNORECASE)\n    return content\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression does not match script end tags like </script >."
      },
      "location": {
        "path": "security/validation/html_validation.py",
        "start_line": 49,
        "end_line": 49,
        "start_column": 29,
        "end_column": 52
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/77/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 76,
    "created_at": "2025-04-22T19:59:40Z",
    "updated_at": "2025-04-22T19:59:40Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/76",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/76",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "tactical_capabilities/sentinel_beacon/services/mesh_manager.py",
        "start_line": 290,
        "end_line": 290,
        "start_column": 25,
        "end_column": 89
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/76/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 75,
    "created_at": "2025-04-22T19:59:40Z",
    "updated_at": "2025-04-22T19:59:40Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/75",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/75",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "tactical_capabilities/sentinel_beacon/services/drone_interface.py",
        "start_line": 293,
        "end_line": 293,
        "start_column": 25,
        "end_column": 94
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/75/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 74,
    "created_at": "2025-04-22T19:59:40Z",
    "updated_at": "2025-04-22T19:59:40Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/74",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/74",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (private) as clear text.\nThis expression logs sensitive data (private) as clear text."
      },
      "location": {
        "path": "tactical_capabilities/sentinel_beacon/services/drone_interface.py",
        "start_line": 271,
        "end_line": 271,
        "start_column": 25,
        "end_column": 95
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/74/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 73,
    "created_at": "2025-04-21T17:38:40Z",
    "updated_at": "2025-04-21T17:38:40Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/73",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/73",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/overly-large-range",
      "severity": "warning",
      "description": "Overly permissive regular expression range",
      "name": "js/overly-large-range",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.",
      "help": "# Overly permissive regular expression range\nIt's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \\ ] ^ _ ` ``.\n\nAnother common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.\n\n\n## Recommendation\nAvoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.\n\n\n## Example\nThe following example code is intended to check whether a string is a valid 6 digit hex color.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9a-fA-f]{6}$/i.test(color);\n}\n\n```\nHowever, the `A-f` range is overly large and matches every uppercase character. It would parse a \"color\" like `#XXYYZZ` as valid.\n\nThe fix is to use an uppercase `A-F` range instead.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9A-F]{6}$/i.test(color);\n}\n\n```\n\n## References\n* GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)\n* wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)\n* Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)\n* Paul Boyd: [The regex \\[,-.\\]](https://pboyd.io/posts/comma-dash-dot/)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Suspicious character range that is equivalent to \\[A-Z\\\\[\\\\\\\\]^_`a-z\\]."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/static/swagger-ui/swagger-ui-bundle.js",
        "start_line": 5354,
        "end_line": 5354,
        "start_column": 77,
        "end_column": 80
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/73/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 72,
    "created_at": "2025-04-21T17:38:40Z",
    "updated_at": "2025-04-21T17:38:40Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/72",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/72",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/overly-large-range",
      "severity": "warning",
      "description": "Overly permissive regular expression range",
      "name": "js/overly-large-range",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.",
      "help": "# Overly permissive regular expression range\nIt's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \\ ] ^ _ ` ``.\n\nAnother common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.\n\n\n## Recommendation\nAvoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.\n\n\n## Example\nThe following example code is intended to check whether a string is a valid 6 digit hex color.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9a-fA-f]{6}$/i.test(color);\n}\n\n```\nHowever, the `A-f` range is overly large and matches every uppercase character. It would parse a \"color\" like `#XXYYZZ` as valid.\n\nThe fix is to use an uppercase `A-F` range instead.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9A-F]{6}$/i.test(color);\n}\n\n```\n\n## References\n* GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)\n* wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)\n* Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)\n* Paul Boyd: [The regex \\[,-.\\]](https://pboyd.io/posts/comma-dash-dot/)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Suspicious character range that is equivalent to \\[A-Z\\\\[\\\\\\\\]^_`a-z\\]."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/static/swagger-ui/swagger-ui-bundle.js",
        "start_line": 5354,
        "end_line": 5354,
        "start_column": 62,
        "end_column": 65
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/72/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 71,
    "created_at": "2025-04-21T17:38:40Z",
    "updated_at": "2025-04-21T17:38:40Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/71",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/71",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/overly-large-range",
      "severity": "warning",
      "description": "Overly permissive regular expression range",
      "name": "js/overly-large-range",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.",
      "help": "# Overly permissive regular expression range\nIt's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \\ ] ^ _ ` ``.\n\nAnother common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.\n\n\n## Recommendation\nAvoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.\n\n\n## Example\nThe following example code is intended to check whether a string is a valid 6 digit hex color.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9a-fA-f]{6}$/i.test(color);\n}\n\n```\nHowever, the `A-f` range is overly large and matches every uppercase character. It would parse a \"color\" like `#XXYYZZ` as valid.\n\nThe fix is to use an uppercase `A-F` range instead.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9A-F]{6}$/i.test(color);\n}\n\n```\n\n## References\n* GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)\n* wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)\n* Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)\n* Paul Boyd: [The regex \\[,-.\\]](https://pboyd.io/posts/comma-dash-dot/)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Suspicious character range that is equivalent to \\[A-Z\\\\[\\\\\\\\]^_`a-z\\]."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/static/swagger-ui/swagger-ui-bundle.js",
        "start_line": 5333,
        "end_line": 5333,
        "start_column": 23,
        "end_column": 26
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/71/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 70,
    "created_at": "2025-04-21T17:38:40Z",
    "updated_at": "2025-04-21T17:38:40Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/70",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/70",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/overly-large-range",
      "severity": "warning",
      "description": "Overly permissive regular expression range",
      "name": "js/overly-large-range",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.",
      "help": "# Overly permissive regular expression range\nIt's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \\ ] ^ _ ` ``.\n\nAnother common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.\n\n\n## Recommendation\nAvoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.\n\n\n## Example\nThe following example code is intended to check whether a string is a valid 6 digit hex color.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9a-fA-f]{6}$/i.test(color);\n}\n\n```\nHowever, the `A-f` range is overly large and matches every uppercase character. It would parse a \"color\" like `#XXYYZZ` as valid.\n\nThe fix is to use an uppercase `A-F` range instead.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9A-F]{6}$/i.test(color);\n}\n\n```\n\n## References\n* GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)\n* wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)\n* Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)\n* Paul Boyd: [The regex \\[,-.\\]](https://pboyd.io/posts/comma-dash-dot/)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Suspicious character range that is equivalent to \\[A-Z\\\\[\\\\\\\\]^_`a-z\\]."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/static/swagger-ui/swagger-ui-bundle.js",
        "start_line": 5186,
        "end_line": 5186,
        "start_column": 25,
        "end_column": 28
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/70/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 67,
    "created_at": "2025-04-21T17:38:40Z",
    "updated_at": "2025-04-21T17:38:40Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/67",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/67",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/bad-tag-filter",
      "severity": "warning",
      "description": "Bad HTML filtering regexp",
      "name": "js/bad-tag-filter",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "external/cwe/cwe-080",
        "external/cwe/cwe-116",
        "external/cwe/cwe-184",
        "external/cwe/cwe-185",
        "external/cwe/cwe-186",
        "security"
      ],
      "full_description": "Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.",
      "help": "# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```javascript\nfunction filterScript(html) {\n    var scriptRegex = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\n    var match;\n    while ((match = scriptRegex.exec(html)) !== null) {\n        html = html.replace(match[0], match[1]);\n    }\n    return html;\n}\n\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression only parses --> and not --!> as a HTML comment end tag."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/static/swagger-ui/swagger-ui-bundle.js",
        "start_line": 5591,
        "end_line": 5591,
        "start_column": 28,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/67/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 65,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/65",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/65",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/polynomial-redos",
      "severity": "warning",
      "description": "Polynomial regular expression used on uncontrolled data",
      "name": "py/polynomial-redos",
      "tags": [
        "external/cwe/cwe-1333",
        "external/cwe/cwe-400",
        "external/cwe/cwe-730",
        "security"
      ],
      "full_description": "A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks.",
      "help": "# Polynomial regular expression used on uncontrolled data\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engine provided by Python uses a backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this use of a regular expression, which removes all leading and trailing whitespace in a string:\n\n```python\n\nre.sub(r\"^\\s+|\\s+$\", \"\", text) # BAD\n```\nThe sub-expression `\"\\s+$\"` will match the whitespace characters in `text` from left to right, but it can start matching anywhere within a whitespace sequence. This is problematic for strings that do **not** end with a whitespace character. Such a string will force the regular expression engine to process each whitespace sequence once per whitespace character in the sequence.\n\nThis ultimately means that the time cost of trimming a string is quadratic in the length of the string. So a string like `\"a b\"` will take milliseconds to process, but a similar string with a million spaces instead of just one will take several minutes.\n\nAvoid this problem by rewriting the regular expression to not contain the ambiguity about when to start matching whitespace sequences. For instance, by using a negative look-behind (`^\\s+|(?<!\\s)\\s+$`), or just by using the built-in strip method (`text.strip()`).\n\nNote that the sub-expression `\"^\\s+\"` is **not** problematic as the `^` anchor restricts when that sub-expression can start matching, and as the regular expression engine matches from left to right.\n\n\n## Example\nAs a similar, but slightly subtler problem, consider the regular expression that matches lines with numbers, possibly written using scientific notation:\n\n```python\n\n^0\\.\\d+E?\\d+$ # BAD\n```\nThe problem with this regular expression is in the sub-expression `\\d+E?\\d+` because the second `\\d+` can start matching digits anywhere after the first match of the first `\\d+` if there is no `E` in the input string.\n\nThis is problematic for strings that do **not** end with a digit. Such a string will force the regular expression engine to process each digit sequence once per digit in the sequence, again leading to a quadratic time complexity.\n\nTo make the processing faster, the regular expression should be rewritten such that the two `\\d+` sub-expressions do not have overlapping matches: `^0\\.\\d+(E\\d+)?$`.\n\n\n## Example\nSometimes it is unclear how a regular expression can be rewritten to avoid the problem. In such cases, it often suffices to limit the length of the input string. For instance, the following regular expression is used to match numbers, and on some non-number inputs it can have quadratic time complexity:\n\n```python\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\nIt is not immediately obvious how to rewrite this regular expression to avoid the problem. However, you can mitigate performance issues by limiting the length to 1000 characters, which will always finish in a reasonable amount of time.\n\n```python\n\nif len(str) > 1000:\n    raise ValueError(\"Input too long\")\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression that depends on a user-provided value may run slow on strings starting with '<details type=\"reasoning\"' and with many repetitions of '<details type=\"reasoning\"'.\nThis regular expression that depends on a user-provided value may run slow on strings starting with '<details type=\"reasoning\">' and with many repetitions of '<details type=\"reasoning\">'."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/tasks.py",
        "start_line": 210,
        "end_line": 210,
        "start_column": 13,
        "end_column": 31
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/65/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 64,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/64",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/64",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/polynomial-redos",
      "severity": "warning",
      "description": "Polynomial regular expression used on uncontrolled data",
      "name": "py/polynomial-redos",
      "tags": [
        "external/cwe/cwe-1333",
        "external/cwe/cwe-400",
        "external/cwe/cwe-730",
        "security"
      ],
      "full_description": "A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks.",
      "help": "# Polynomial regular expression used on uncontrolled data\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engine provided by Python uses a backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this use of a regular expression, which removes all leading and trailing whitespace in a string:\n\n```python\n\nre.sub(r\"^\\s+|\\s+$\", \"\", text) # BAD\n```\nThe sub-expression `\"\\s+$\"` will match the whitespace characters in `text` from left to right, but it can start matching anywhere within a whitespace sequence. This is problematic for strings that do **not** end with a whitespace character. Such a string will force the regular expression engine to process each whitespace sequence once per whitespace character in the sequence.\n\nThis ultimately means that the time cost of trimming a string is quadratic in the length of the string. So a string like `\"a b\"` will take milliseconds to process, but a similar string with a million spaces instead of just one will take several minutes.\n\nAvoid this problem by rewriting the regular expression to not contain the ambiguity about when to start matching whitespace sequences. For instance, by using a negative look-behind (`^\\s+|(?<!\\s)\\s+$`), or just by using the built-in strip method (`text.strip()`).\n\nNote that the sub-expression `\"^\\s+\"` is **not** problematic as the `^` anchor restricts when that sub-expression can start matching, and as the regular expression engine matches from left to right.\n\n\n## Example\nAs a similar, but slightly subtler problem, consider the regular expression that matches lines with numbers, possibly written using scientific notation:\n\n```python\n\n^0\\.\\d+E?\\d+$ # BAD\n```\nThe problem with this regular expression is in the sub-expression `\\d+E?\\d+` because the second `\\d+` can start matching digits anywhere after the first match of the first `\\d+` if there is no `E` in the input string.\n\nThis is problematic for strings that do **not** end with a digit. Such a string will force the regular expression engine to process each digit sequence once per digit in the sequence, again leading to a quadratic time complexity.\n\nTo make the processing faster, the regular expression should be rewritten such that the two `\\d+` sub-expressions do not have overlapping matches: `^0\\.\\d+(E\\d+)?$`.\n\n\n## Example\nSometimes it is unclear how a regular expression can be rewritten to avoid the problem. In such cases, it often suffices to limit the length of the input string. For instance, the following regular expression is used to match numbers, and on some non-number inputs it can have quadratic time complexity:\n\n```python\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\nIt is not immediately obvious how to rewrite this regular expression to avoid the problem. However, you can mitigate performance issues by limiting the length to 1000 characters, which will always finish in a reasonable amount of time.\n\n```python\n\nif len(str) > 1000:\n    raise ValueError(\"Input too long\")\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression that depends on a user-provided value may run slow on strings starting with '_:' and with many repetitions of ' '.\nThis regular expression that depends on a user-provided value may run slow on strings starting with '_:' and with many repetitions of ' '.\nThis regular expression that depends on a user-provided value may run slow on strings starting with '_:' and with many repetitions of ' '.\nThis regular expression that depends on a user-provided value may run slow on strings starting with '_:' and with many repetitions of ' '."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/utils/plugin.py",
        "start_line": 42,
        "end_line": 42,
        "start_column": 51,
        "end_column": 55
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/64/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 63,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/63",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/63",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/polynomial-redos",
      "severity": "warning",
      "description": "Polynomial regular expression used on uncontrolled data",
      "name": "py/polynomial-redos",
      "tags": [
        "external/cwe/cwe-1333",
        "external/cwe/cwe-400",
        "external/cwe/cwe-730",
        "security"
      ],
      "full_description": "A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks.",
      "help": "# Polynomial regular expression used on uncontrolled data\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engine provided by Python uses a backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this use of a regular expression, which removes all leading and trailing whitespace in a string:\n\n```python\n\nre.sub(r\"^\\s+|\\s+$\", \"\", text) # BAD\n```\nThe sub-expression `\"\\s+$\"` will match the whitespace characters in `text` from left to right, but it can start matching anywhere within a whitespace sequence. This is problematic for strings that do **not** end with a whitespace character. Such a string will force the regular expression engine to process each whitespace sequence once per whitespace character in the sequence.\n\nThis ultimately means that the time cost of trimming a string is quadratic in the length of the string. So a string like `\"a b\"` will take milliseconds to process, but a similar string with a million spaces instead of just one will take several minutes.\n\nAvoid this problem by rewriting the regular expression to not contain the ambiguity about when to start matching whitespace sequences. For instance, by using a negative look-behind (`^\\s+|(?<!\\s)\\s+$`), or just by using the built-in strip method (`text.strip()`).\n\nNote that the sub-expression `\"^\\s+\"` is **not** problematic as the `^` anchor restricts when that sub-expression can start matching, and as the regular expression engine matches from left to right.\n\n\n## Example\nAs a similar, but slightly subtler problem, consider the regular expression that matches lines with numbers, possibly written using scientific notation:\n\n```python\n\n^0\\.\\d+E?\\d+$ # BAD\n```\nThe problem with this regular expression is in the sub-expression `\\d+E?\\d+` because the second `\\d+` can start matching digits anywhere after the first match of the first `\\d+` if there is no `E` in the input string.\n\nThis is problematic for strings that do **not** end with a digit. Such a string will force the regular expression engine to process each digit sequence once per digit in the sequence, again leading to a quadratic time complexity.\n\nTo make the processing faster, the regular expression should be rewritten such that the two `\\d+` sub-expressions do not have overlapping matches: `^0\\.\\d+(E\\d+)?$`.\n\n\n## Example\nSometimes it is unclear how a regular expression can be rewritten to avoid the problem. In such cases, it often suffices to limit the length of the input string. For instance, the following regular expression is used to match numbers, and on some non-number inputs it can have quadratic time complexity:\n\n```python\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\nIt is not immediately obvious how to rewrite this regular expression to avoid the problem. However, you can mitigate performance issues by limiting the length to 1000 characters, which will always finish in a reasonable amount of time.\n\n```python\n\nif len(str) > 1000:\n    raise ValueError(\"Input too long\")\n\nmatch = re.search(r'^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$', str) \n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This regular expression that depends on a user-provided value may run slow on strings with many repetitions of '?'.\nThis regular expression that depends on a user-provided value may run slow on strings with many repetitions of '?'."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/utils/misc.py",
        "start_line": 284,
        "end_line": 284,
        "start_column": 49,
        "end_column": 54
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/63/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 62,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/62",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/62",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/insecure-protocol",
      "severity": "warning",
      "description": "Use of insecure SSL/TLS version",
      "name": "py/insecure-protocol",
      "tags": [
        "external/cwe/cwe-327",
        "security"
      ],
      "full_description": "Using an insecure SSL/TLS version may leave the connection vulnerable to attacks.",
      "help": "# Use of insecure SSL/TLS version\nUsing a broken or weak cryptographic protocol may make a connection vulnerable to interference from an attacker.\n\n\n## Recommendation\nEnsure that a modern, strong protocol is used. All versions of SSL, and TLS versions 1.0 and 1.1 are known to be vulnerable to attacks. Using TLS 1.2 or above is strongly recommended.\n\n\n## Example\nThe following code shows a variety of ways of setting up a connection using SSL or TLS. They are all insecure because of the version specified.\n\n\n```python\nimport ssl\nimport socket\n\n# Using the deprecated ssl.wrap_socket method\nssl.wrap_socket(socket.socket(), ssl_version=ssl.PROTOCOL_SSLv2)\n\n# Using SSLContext\ncontext = ssl.SSLContext(ssl_version=ssl.PROTOCOL_SSLv3)\n\n# Using pyOpenSSL\n\nfrom pyOpenSSL import SSL\n\ncontext = SSL.Context(SSL.TLSv1_METHOD)\n\n\n\n```\nAll cases should be updated to use a secure protocol, such as `PROTOCOL_TLSv1_2`.\n\nNote that `ssl.wrap_socket` has been deprecated in Python 3.7. The recommended alternatives are:\n\n* `ssl.SSLContext` - supported in Python 2.7.9, 3.2, and later versions\n* `ssl.create_default_context` - a convenience function, supported in Python 3.4 and later versions.\nEven when you use these alternatives, you should ensure that a safe protocol is used. The following code illustrates how to use flags (available since Python 3.2) or the \\`minimum_version\\` field (favored since Python 3.7) to restrict the protocols accepted when creating a connection.\n\n\n```python\nimport ssl\n\n# Using flags to restrict the protocol\ncontext = ssl.SSLContext()\ncontext.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1\n\n# Declaring a minimum version to restrict the protocol\ncontext = ssl.create_default_context()\ncontext.minimum_version = ssl.TLSVersion.TLSv1_2\n\n```\n\n## References\n* Wikipedia: [ Transport Layer Security](https://en.wikipedia.org/wiki/Transport_Layer_Security).\n* Python 3 documentation: [ class ssl.SSLContext](https://docs.python.org/3/library/ssl.html#ssl.SSLContext).\n* Python 3 documentation: [ ssl.wrap_socket](https://docs.python.org/3/library/ssl.html#ssl.wrap_socket).\n* Python 3 documentation: [ notes on context creation](https://docs.python.org/3/library/ssl.html#functions-constants-and-exceptions).\n* Python 3 documentation: [ notes on security considerations](https://docs.python.org/3/library/ssl.html#ssl-security).\n* pyOpenSSL documentation: [ An interface to the SSL-specific parts of OpenSSL](https://pyopenssl.org/en/stable/api/ssl.html).\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Insecure SSL/TLS protocol version TLSv1 allowed by call to ssl.create_default_context.\nInsecure SSL/TLS protocol version TLSv1_1 allowed by call to ssl.create_default_context."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/retrieval/web/utils.py",
        "start_line": 110,
        "end_line": 110,
        "start_column": 14,
        "end_column": 21
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/62/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 61,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/61",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/61",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/clear-text-logging-sensitive-data",
      "severity": "error",
      "description": "Clear-text logging of sensitive information",
      "name": "py/clear-text-logging-sensitive-data",
      "tags": [
        "external/cwe/cwe-312",
        "external/cwe/cwe-359",
        "external/cwe/cwe-532",
        "security"
      ],
      "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
      "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`print\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```python\n# BAD: Logging cleartext sensitive data\nimport os\nprint(f\"[INFO] Environment: {os.environ}\")\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```python\nnot_sensitive_data = {'a': 1, 'b': 2}\n# GOOD: it is fine to log data that is not sensitive\nprint(f\"[INFO] Some object contains: {not_sensitive_data}\")\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This expression logs sensitive data (secret) as clear text.\nThis expression logs sensitive data (secret) as clear text."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/models/auths.py",
        "start_line": 166,
        "end_line": 166,
        "start_column": 18,
        "end_column": 65
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/61/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 60,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/60",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/60",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/path-injection",
      "severity": "error",
      "description": "Uncontrolled data used in path expression",
      "name": "py/path-injection",
      "tags": [
        "correctness",
        "external/cwe/cwe-022",
        "external/cwe/cwe-023",
        "external/cwe/cwe-036",
        "external/cwe/cwe-073",
        "external/cwe/cwe-099",
        "security"
      ],
      "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
      "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "This path depends on a user-provided value.\nThis path depends on a user-provided value.\nThis path depends on a user-provided value.\nThis path depends on a user-provided value."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/retrieval/utils.py",
        "start_line": 593,
        "end_line": 593,
        "start_column": 24,
        "end_column": 29
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/60/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 59,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/59",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/59",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/full-ssrf",
      "severity": "error",
      "description": "Full server-side request forgery",
      "name": "py/full-ssrf",
      "tags": [
        "external/cwe/cwe-918",
        "security"
      ],
      "full_description": "Making a network request to a URL that is fully user-controlled allows for request forgery attacks.",
      "help": "# Full server-side request forgery\nDirectly incorporating user input into an HTTP request without validating the input can facilitate server-side request forgery (SSRF) attacks. In these attacks, the request may be changed, directed at a different server, or via a different protocol. This can allow the attacker to obtain sensitive information or perform actions with escalated privilege.\n\nWe make a distinctions between how much of the URL an attacker can control:\n\n* **Full SSRF**: where the full URL can be controlled.\n* **Partial SSRF**: where only part of the URL can be controlled, such as the path component of a URL to a hardcoded domain.\n\n\nPartial control of a URL is often much harder to exploit. Therefore we have created a separate query for each of these.\n\nThis query covers full SSRF, to find partial SSRF use the `py/partial-ssrf` query.\n\n\n## Recommendation\nTo guard against SSRF attacks you should avoid putting user-provided input directly into a request URL. On the application level, maintain a list of authorized URLs on the server and choose from that list based on the input provided. If that is not possible, one should verify the IP address for all user-controlled requests to ensure they are not private. This requires saving the verified IP address of each domain, then utilizing a custom HTTP adapter to ensure that future requests to that domain use the verified IP address. On the network level, you can segment the vulnerable application into its own LAN or block access to specific devices.\n\n\n## Example\nThe following example shows code vulnerable to a full SSRF attack, because it uses untrusted input (HTTP request parameter) directly to construct a URL. By using `evil.com#` as the `target` value, the requested URL will be `https://evil.com#.example.com/data/`. It also shows how to remedy the problem by using the user input select a known fixed string.\n\n\n```python\nimport requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/full_ssrf\")\ndef full_ssrf():\n    target = request.args[\"target\"]\n\n    # BAD: user has full control of URL\n    resp = requests.get(\"https://\" + target + \".example.com/data/\")\n\n    # GOOD: `subdomain` is controlled by the server.\n    subdomain = \"europe\" if target == \"EU\" else \"world\"\n    resp = requests.get(\"https://\" + subdomain + \".example.com/data/\")\n\n```\n\n## Example\nThe following example shows code vulnerable to a partial SSRF attack, because it uses untrusted input (HTTP request parameter) directly to construct a URL. By using `../transfer-funds-to/123?amount=456` as the `user_id` value, the requested URL will be `https://api.example.com/transfer-funds-to/123?amount=456`. It also shows how to remedy the problem by validating the input.\n\n\n```python\nimport requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/partial_ssrf\")\ndef partial_ssrf():\n    user_id = request.args[\"user_id\"]\n\n    # BAD: user can fully control the path component of the URL\n    resp = requests.get(\"https://api.example.com/user_info/\" + user_id)\n\n    if user_id.isalnum():\n        # GOOD: user_id is restricted to be alpha-numeric, and cannot alter path component of URL\n        resp = requests.get(\"https://api.example.com/user_info/\" + user_id)\n\n```\n\n## References\n* [OWASP SSRF article](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n* [PortSwigger SSRF article](https://portswigger.net/web-security/ssrf)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The full URL of this request depends on a user-provided value.\nThe full URL of this request depends on a user-provided value."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/ollama.py",
        "start_line": 1537,
        "end_line": 1537,
        "start_column": 20,
        "end_column": 58
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/59/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 58,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/58",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/58",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/full-ssrf",
      "severity": "error",
      "description": "Full server-side request forgery",
      "name": "py/full-ssrf",
      "tags": [
        "external/cwe/cwe-918",
        "security"
      ],
      "full_description": "Making a network request to a URL that is fully user-controlled allows for request forgery attacks.",
      "help": "# Full server-side request forgery\nDirectly incorporating user input into an HTTP request without validating the input can facilitate server-side request forgery (SSRF) attacks. In these attacks, the request may be changed, directed at a different server, or via a different protocol. This can allow the attacker to obtain sensitive information or perform actions with escalated privilege.\n\nWe make a distinctions between how much of the URL an attacker can control:\n\n* **Full SSRF**: where the full URL can be controlled.\n* **Partial SSRF**: where only part of the URL can be controlled, such as the path component of a URL to a hardcoded domain.\n\n\nPartial control of a URL is often much harder to exploit. Therefore we have created a separate query for each of these.\n\nThis query covers full SSRF, to find partial SSRF use the `py/partial-ssrf` query.\n\n\n## Recommendation\nTo guard against SSRF attacks you should avoid putting user-provided input directly into a request URL. On the application level, maintain a list of authorized URLs on the server and choose from that list based on the input provided. If that is not possible, one should verify the IP address for all user-controlled requests to ensure they are not private. This requires saving the verified IP address of each domain, then utilizing a custom HTTP adapter to ensure that future requests to that domain use the verified IP address. On the network level, you can segment the vulnerable application into its own LAN or block access to specific devices.\n\n\n## Example\nThe following example shows code vulnerable to a full SSRF attack, because it uses untrusted input (HTTP request parameter) directly to construct a URL. By using `evil.com#` as the `target` value, the requested URL will be `https://evil.com#.example.com/data/`. It also shows how to remedy the problem by using the user input select a known fixed string.\n\n\n```python\nimport requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/full_ssrf\")\ndef full_ssrf():\n    target = request.args[\"target\"]\n\n    # BAD: user has full control of URL\n    resp = requests.get(\"https://\" + target + \".example.com/data/\")\n\n    # GOOD: `subdomain` is controlled by the server.\n    subdomain = \"europe\" if target == \"EU\" else \"world\"\n    resp = requests.get(\"https://\" + subdomain + \".example.com/data/\")\n\n```\n\n## Example\nThe following example shows code vulnerable to a partial SSRF attack, because it uses untrusted input (HTTP request parameter) directly to construct a URL. By using `../transfer-funds-to/123?amount=456` as the `user_id` value, the requested URL will be `https://api.example.com/transfer-funds-to/123?amount=456`. It also shows how to remedy the problem by validating the input.\n\n\n```python\nimport requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/partial_ssrf\")\ndef partial_ssrf():\n    user_id = request.args[\"user_id\"]\n\n    # BAD: user can fully control the path component of the URL\n    resp = requests.get(\"https://api.example.com/user_info/\" + user_id)\n\n    if user_id.isalnum():\n        # GOOD: user_id is restricted to be alpha-numeric, and cannot alter path component of URL\n        resp = requests.get(\"https://api.example.com/user_info/\" + user_id)\n\n```\n\n## References\n* [OWASP SSRF article](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n* [PortSwigger SSRF article](https://portswigger.net/web-security/ssrf)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n",
      "security_severity_level": "critical"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The full URL of this request depends on a user-provided value."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/auths.py",
        "start_line": 563,
        "end_line": 563,
        "start_column": 32,
        "end_column": 70
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/58/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 55,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/55",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/55",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/url-redirection",
      "severity": "error",
      "description": "URL redirection from remote source",
      "name": "py/url-redirection",
      "tags": [
        "external/cwe/cwe-601",
        "security"
      ],
      "full_description": "URL redirection based on unvalidated user input may cause redirection to malicious web sites.",
      "help": "# URL redirection from remote source\nDirectly incorporating user input into a URL redirect request without validating the input can facilitate phishing attacks. In these attacks, unsuspecting users can be redirected to a malicious site that looks very similar to the real site they intend to visit, but which is controlled by the attacker.\n\n\n## Recommendation\nTo guard against untrusted URL redirection, it is advisable to avoid putting user input directly into a redirect URL. Instead, maintain a list of authorized redirects on the server; then choose from that list based on the user input provided.\n\nIf this is not possible, then the user input should be validated in some other way, for example, by verifying that the target URL does not include an explicit host name.\n\n\n## Example\nThe following example shows an HTTP request parameter being used directly in a URL redirect without validating the input, which facilitates phishing attacks:\n\n\n```python\nfrom flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    return redirect(target, code=302)\n\n```\nIf you know the set of valid redirect targets, you can maintain a list of them on the server and check that the user input is in that list:\n\n\n```python\nfrom flask import Flask, request, redirect\n\nVALID_REDIRECT = \"http://cwe.mitre.org/data/definitions/601.html\"\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    if target == VALID_REDIRECT:\n        return redirect(target, code=302)\n    else:\n        # ignore the target and redirect to the home page\n        return redirect('/', code=302)\n\n```\nOften this is not possible, so an alternative is to check that the target URL does not specify an explicit host name. For example, you can use the `urlparse` function from the Python standard library to parse the URL and check that the `netloc` attribute is empty.\n\nNote, however, that some cases are not handled as we desire out-of-the-box by `urlparse`, so we need to adjust two things, as shown in the example below:\n\n* Many browsers accept backslash characters (`\\`) as equivalent to forward slash characters (`/`) in URLs, but the `urlparse` function does not.\n* Mistyped URLs such as `https:/example.com` or `https:///example.com` are parsed as having an empty `netloc` attribute, while browsers will still redirect to the correct site.\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    target = target.replace('\\\\', '')\n    if not urlparse(target).netloc and not urlparse(target).scheme:\n        # relative path, safe to redirect\n        return redirect(target, code=302)\n    # ignore the target and redirect to the home page\n    return redirect('/', code=302)\n\n```\nFor Django application, you can use the function `url_has_allowed_host_and_scheme` to check that a URL is safe to redirect to, as shown in the following example:\n\n\n```python\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import url_has_allowed_host_and_scheme\nfrom django.views import View\n\nclass RedirectView(View):\n    def get(self, request, *args, **kwargs):\n        target = request.GET.get('target', '')\n        if url_has_allowed_host_and_scheme(target, allowed_hosts=None):\n            return HttpResponseRedirect(target)\n        else:\n            # ignore the target and redirect to the home page\n            return redirect('/')\n```\nNote that `url_has_allowed_host_and_scheme` handles backslashes correctly, so no additional processing is required.\n\n\n## References\n* OWASP: [ XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Python standard library: [ urllib.parse](https://docs.python.org/3/library/urllib.parse.html).\n* Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Untrusted URL redirection depends on a user-provided value."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/auths.py",
        "start_line": 571,
        "end_line": 571,
        "start_column": 41,
        "end_column": 87
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/55/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 54,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/54",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/54",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string webhook.office.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/utils/webhook.py",
        "start_line": 28,
        "end_line": 28,
        "start_column": 14,
        "end_column": 41
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/54/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 53,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/53",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/53",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string https://chat.googleapis.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/utils/webhook.py",
        "start_line": 18,
        "end_line": 18,
        "start_column": 48,
        "end_column": 84
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/53/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 52,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/52",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/52",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string https://hooks.slack.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/utils/webhook.py",
        "start_line": 18,
        "end_line": 18,
        "start_column": 12,
        "end_column": 44
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/52/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 51,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/51",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/51",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string api.openai.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/openai.py",
        "start_line": 524,
        "end_line": 524,
        "start_column": 24,
        "end_column": 47
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/51/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 50,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/50",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/50",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string https://api.openai.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/audio.py",
        "start_line": 899,
        "end_line": 901,
        "start_column": 16,
        "end_column": 10
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/50/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 49,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/49",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/49",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/incomplete-url-substring-sanitization",
      "severity": "warning",
      "description": "Incomplete URL substring sanitization",
      "name": "py/incomplete-url-substring-sanitization",
      "tags": [
        "correctness",
        "external/cwe/cwe-020",
        "security"
      ],
      "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
      "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is a common technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain.\n\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n# Not safe, as \"evil-example.net/example.com\" would be accepted\n\n@app.route('/some/path/bad1')\ndef unsafe1(request):\n    target = request.args.get('target', '')\n    if \"example.com\" in target:\n        return redirect(target)\n\n# Not safe, as \"benign-looking-prefix-example.com\" would be accepted\n\n@app.route('/some/path/bad2')\ndef unsafe2(request):\n    target = request.args.get('target', '')\n    if target.endswith(\"example.com\"):\n        return redirect(target)\n\n\n\n#Simplest and safest approach is to use an allowlist\n\n@app.route('/some/path/good1')\ndef safe1(request):\n    allowlist = [\n        \"example.com/home\",\n        \"example.com/login\",\n    ]\n    target = request.args.get('target', '')\n    if target in allowlist:\n        return redirect(target)\n\n#More complex example allowing sub-domains.\n\n@app.route('/some/path/good2')\ndef safe2(request):\n    target = request.args.get('target', '')\n    host = urlparse(target).hostname\n    #Note the '.' preceding example.com\n    if host and host.endswith(\".example.com\"):\n        return redirect(target)\n\n\n```\nThe first two examples show unsafe checks that are easily bypassed. In `unsafe1` the attacker can simply add `example.com` anywhere in the url. For example, `http://evil-example.net/example.com`.\n\nIn `unsafe2` the attacker must use a hostname ending in `example.com`, but that is easy to do. For example, `http://benign-looking-prefix-example.com`.\n\nThe second two examples show safe checks. In `safe1`, an allowlist is used. Although fairly inflexible, this is easy to get right and is most likely to be safe.\n\nIn `safe2`, `urlparse` is used to parse the URL, then the hostname is checked to make sure it ends with `.example.com`.\n\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
      "security_severity_level": "high"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "The string https://api.openai.com may be at an arbitrary position in the sanitized URL."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/audio.py",
        "start_line": 853,
        "end_line": 855,
        "start_column": 16,
        "end_column": 10
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/49/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 47,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/47",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/47",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/tasks.py",
        "start_line": 701,
        "end_line": 701,
        "start_column": 21,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/47/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 46,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/46",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/46",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/tasks.py",
        "start_line": 697,
        "end_line": 697,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/46/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 45,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/45",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/45",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/tasks.py",
        "start_line": 646,
        "end_line": 646,
        "start_column": 21,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/45/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 44,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/44",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/44",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/tasks.py",
        "start_line": 642,
        "end_line": 642,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/44/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 43,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/43",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/43",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/tasks.py",
        "start_line": 566,
        "end_line": 566,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/43/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 42,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/42",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/42",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/tasks.py",
        "start_line": 483,
        "end_line": 483,
        "start_column": 21,
        "end_column": 39
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/42/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 41,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/41",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/41",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/tasks.py",
        "start_line": 479,
        "end_line": 479,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/41/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 40,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/40",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/40",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/tasks.py",
        "start_line": 396,
        "end_line": 396,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/40/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 39,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/39",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/39",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/tasks.py",
        "start_line": 324,
        "end_line": 324,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/39/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 38,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/38",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/38",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/tasks.py",
        "start_line": 249,
        "end_line": 249,
        "start_column": 16,
        "end_column": 85
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/38/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 37,
    "created_at": "2025-04-21T17:38:23Z",
    "updated_at": "2025-04-21T17:38:23Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/37",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/37",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "py/stack-trace-exposure",
      "severity": "error",
      "description": "Information exposure through an exception",
      "name": "py/stack-trace-exposure",
      "tags": [
        "external/cwe/cwe-209",
        "external/cwe/cwe-497",
        "security"
      ],
      "full_description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
      "help": "# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:python",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Stack trace information flows to this location and may be exposed to an external user."
      },
      "location": {
        "path": "sentinelweb/backend/sentinel_web/routers/ollama.py",
        "start_line": 1700,
        "end_line": 1700,
        "start_column": 30,
        "end_column": 51
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/37/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 36,
    "created_at": "2025-04-21T17:38:08Z",
    "updated_at": "2025-04-21T17:38:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/36",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/36",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/sentinel.yml",
        "start_line": 13,
        "end_line": 42,
        "start_column": 5,
        "end_column": 15
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/36/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 12,
    "created_at": "2025-04-21T17:38:08Z",
    "updated_at": "2025-04-21T17:38:09Z",
    "url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/12",
    "html_url": "https://github.com/BuloZB/BuloCloudSentinel/security/code-scanning/12",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": [
        "actions",
        "external/cwe/cwe-275",
        "maintainability",
        "security"
      ],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n",
      "security_severity_level": "medium"
    },
    "tool": {
      "name": "CodeQL",
      "guid": null,
      "version": "2.21.3"
    },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "90b2c29cdd82145b2008fe37abd22e905e6552ca",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/ci.yml",
        "start_line": 173,
        "end_line": 260,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/BuloZB/BuloCloudSentinel/code-scanning/alerts/12/instances",
    "dismissal_approved_by": null
  }
]